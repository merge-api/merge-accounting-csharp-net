/*
 * Merge Accounting API
 *
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Merge.AccountingClient.Client.OpenAPIDateConverter;

namespace Merge.AccountingClient.Model
{
    /// <summary>
    /// # The BalanceSheet Object ### Description The &#x60;BalanceSheet&#x60; object is used to represent a company&#39;s balance sheet.  ### Usage Example Fetch from the &#x60;LIST BalanceSheets&#x60; endpoint and view a company&#39;s balance sheets.
    /// </summary>
    [DataContract(Name = "BalanceSheet")]
    public partial class BalanceSheet : IEquatable<BalanceSheet>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BalanceSheet" /> class.
        /// </summary>
        /// <param name="remoteId">The third-party API ID of the matching object..</param>
        /// <param name="name">The balance sheet&#39;s name..</param>
        /// <param name="date">The balance sheet&#39;s date. The balance sheet data will reflect the company&#39;s financial position this point in time..</param>
        /// <param name="netAssets">The balance sheet&#39;s net assets..</param>
        /// <param name="remoteGeneratedAt">The time that balance sheet was generated by the accounting system..</param>
        public BalanceSheet(string remoteId = default(string), string name = default(string), DateTime? date = default(DateTime?), float? netAssets = default(float?), DateTime? remoteGeneratedAt = default(DateTime?))
        {
            this.RemoteId = remoteId;
            this.Name = name;
            this.Date = date;
            this.NetAssets = netAssets;
            this.RemoteGeneratedAt = remoteGeneratedAt;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }

        /// <summary>
        /// The third-party API ID of the matching object.
        /// </summary>
        /// <value>The third-party API ID of the matching object.</value>
        [DataMember(Name = "remote_id", EmitDefaultValue = true)]
        public string RemoteId { get; set; }

        /// <summary>
        /// Gets or Sets RemoteData
        /// </summary>
        [DataMember(Name = "remote_data", EmitDefaultValue = true)]
        public List<RemoteData> RemoteData { get; private set; }

        /// <summary>
        /// Returns false as RemoteData should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRemoteData()
        {
            return false;
        }

        /// <summary>
        /// The balance sheet&#39;s name.
        /// </summary>
        /// <value>The balance sheet&#39;s name.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The balance sheet&#39;s date. The balance sheet data will reflect the company&#39;s financial position this point in time.
        /// </summary>
        /// <value>The balance sheet&#39;s date. The balance sheet data will reflect the company&#39;s financial position this point in time.</value>
        [DataMember(Name = "date", EmitDefaultValue = true)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// The balance sheet&#39;s net assets.
        /// </summary>
        /// <value>The balance sheet&#39;s net assets.</value>
        [DataMember(Name = "net_assets", EmitDefaultValue = true)]
        public float? NetAssets { get; set; }

        /// <summary>
        /// Gets or Sets Assets
        /// </summary>
        [DataMember(Name = "assets", EmitDefaultValue = false)]
        public List<ReportItem> Assets { get; private set; }

        /// <summary>
        /// Returns false as Assets should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAssets()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets Liabilities
        /// </summary>
        [DataMember(Name = "liabilities", EmitDefaultValue = false)]
        public List<ReportItem> Liabilities { get; private set; }

        /// <summary>
        /// Returns false as Liabilities should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLiabilities()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets Equity
        /// </summary>
        [DataMember(Name = "equity", EmitDefaultValue = false)]
        public List<ReportItem> Equity { get; private set; }

        /// <summary>
        /// Returns false as Equity should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEquity()
        {
            return false;
        }

        /// <summary>
        /// The time that balance sheet was generated by the accounting system.
        /// </summary>
        /// <value>The time that balance sheet was generated by the accounting system.</value>
        [DataMember(Name = "remote_generated_at", EmitDefaultValue = true)]
        public DateTime? RemoteGeneratedAt { get; set; }

        /// <summary>
        /// Indicates whether or not this object has been deleted by third party webhooks.
        /// </summary>
        /// <value>Indicates whether or not this object has been deleted by third party webhooks.</value>
        [DataMember(Name = "remote_was_deleted", EmitDefaultValue = true)]
        public bool RemoteWasDeleted { get; private set; }

        /// <summary>
        /// Returns false as RemoteWasDeleted should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRemoteWasDeleted()
        {
            return false;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BalanceSheet {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RemoteId: ").Append(RemoteId).Append("\n");
            sb.Append("  RemoteData: ").Append(RemoteData).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  NetAssets: ").Append(NetAssets).Append("\n");
            sb.Append("  Assets: ").Append(Assets).Append("\n");
            sb.Append("  Liabilities: ").Append(Liabilities).Append("\n");
            sb.Append("  Equity: ").Append(Equity).Append("\n");
            sb.Append("  RemoteGeneratedAt: ").Append(RemoteGeneratedAt).Append("\n");
            sb.Append("  RemoteWasDeleted: ").Append(RemoteWasDeleted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BalanceSheet);
        }

        /// <summary>
        /// Returns true if BalanceSheet instances are equal
        /// </summary>
        /// <param name="input">Instance of BalanceSheet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BalanceSheet input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.RemoteId == input.RemoteId ||
                    (this.RemoteId != null &&
                    this.RemoteId.Equals(input.RemoteId))
                ) && 
                (
                    this.RemoteData == input.RemoteData ||
                    this.RemoteData != null &&
                    input.RemoteData != null &&
                    this.RemoteData.SequenceEqual(input.RemoteData)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.NetAssets == input.NetAssets ||
                    (this.NetAssets != null &&
                    this.NetAssets.Equals(input.NetAssets))
                ) && 
                (
                    this.Assets == input.Assets ||
                    this.Assets != null &&
                    input.Assets != null &&
                    this.Assets.SequenceEqual(input.Assets)
                ) && 
                (
                    this.Liabilities == input.Liabilities ||
                    this.Liabilities != null &&
                    input.Liabilities != null &&
                    this.Liabilities.SequenceEqual(input.Liabilities)
                ) && 
                (
                    this.Equity == input.Equity ||
                    this.Equity != null &&
                    input.Equity != null &&
                    this.Equity.SequenceEqual(input.Equity)
                ) && 
                (
                    this.RemoteGeneratedAt == input.RemoteGeneratedAt ||
                    (this.RemoteGeneratedAt != null &&
                    this.RemoteGeneratedAt.Equals(input.RemoteGeneratedAt))
                ) && 
                (
                    this.RemoteWasDeleted == input.RemoteWasDeleted ||
                    this.RemoteWasDeleted.Equals(input.RemoteWasDeleted)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.RemoteId != null)
                    hashCode = hashCode * 59 + this.RemoteId.GetHashCode();
                if (this.RemoteData != null)
                    hashCode = hashCode * 59 + this.RemoteData.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.NetAssets != null)
                    hashCode = hashCode * 59 + this.NetAssets.GetHashCode();
                if (this.Assets != null)
                    hashCode = hashCode * 59 + this.Assets.GetHashCode();
                if (this.Liabilities != null)
                    hashCode = hashCode * 59 + this.Liabilities.GetHashCode();
                if (this.Equity != null)
                    hashCode = hashCode * 59 + this.Equity.GetHashCode();
                if (this.RemoteGeneratedAt != null)
                    hashCode = hashCode * 59 + this.RemoteGeneratedAt.GetHashCode();
                hashCode = hashCode * 59 + this.RemoteWasDeleted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
