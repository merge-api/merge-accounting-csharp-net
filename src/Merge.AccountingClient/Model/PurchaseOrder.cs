/*
 * Merge Accounting API
 *
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Merge.AccountingClient.Client.OpenAPIDateConverter;

namespace Merge.AccountingClient.Model
{
    /// <summary>
    /// # The PurchaseOrder Object ### Description The &#x60;PurchaseOrder&#x60; object is used to represent a company&#39;s purchase orders.  ### Usage Example Fetch from the &#x60;LIST PurchaseOrders&#x60; endpoint and view a company&#39;s purchase orders.
    /// </summary>
    [DataContract(Name = "PurchaseOrder")]
    public partial class PurchaseOrder : IEquatable<PurchaseOrder>, IValidatableObject
    {

        /// <summary>
        /// The purchase order&#39;s status.
        /// </summary>
        /// <value>The purchase order&#39;s status.</value>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public PurchaseOrderStatusEnum? Status { get; set; }

        /// <summary>
        /// The purchase order&#39;s currency.
        /// </summary>
        /// <value>The purchase order&#39;s currency.</value>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public CurrencyEnum? Currency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseOrder" /> class.
        /// </summary>
        /// <param name="remoteId">The third-party API ID of the matching object..</param>
        /// <param name="status">The purchase order&#39;s status..</param>
        /// <param name="issueDate">The purchase order&#39;s issue date..</param>
        /// <param name="deliveryDate">The purchase order&#39;s delivery date..</param>
        /// <param name="deliveryAddress">The purchase order&#39;s delivery address..</param>
        /// <param name="totalAmount">The purchase order&#39;s total amount..</param>
        /// <param name="currency">The purchase order&#39;s currency..</param>
        /// <param name="remoteCreatedAt">When the third party&#39;s purchase order note was created..</param>
        /// <param name="remoteUpdatedAt">When the third party&#39;s purchase order note was updated..</param>
        public PurchaseOrder(string remoteId = default(string), PurchaseOrderStatusEnum? status = default(PurchaseOrderStatusEnum?), DateTime? issueDate = default(DateTime?), DateTime? deliveryDate = default(DateTime?), Guid? deliveryAddress = default(Guid?), float? totalAmount = default(float?), CurrencyEnum? currency = default(CurrencyEnum?), DateTime? remoteCreatedAt = default(DateTime?), DateTime? remoteUpdatedAt = default(DateTime?))
        {
            this.RemoteId = remoteId;
            this.Status = status;
            this.IssueDate = issueDate;
            this.DeliveryDate = deliveryDate;
            this.DeliveryAddress = deliveryAddress;
            this.TotalAmount = totalAmount;
            this.Currency = currency;
            this.RemoteCreatedAt = remoteCreatedAt;
            this.RemoteUpdatedAt = remoteUpdatedAt;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }

        /// <summary>
        /// The third-party API ID of the matching object.
        /// </summary>
        /// <value>The third-party API ID of the matching object.</value>
        [DataMember(Name = "remote_id", EmitDefaultValue = true)]
        public string RemoteId { get; set; }

        /// <summary>
        /// Gets or Sets RemoteData
        /// </summary>
        [DataMember(Name = "remote_data", EmitDefaultValue = true)]
        public List<RemoteData> RemoteData { get; private set; }

        /// <summary>
        /// Returns false as RemoteData should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRemoteData()
        {
            return false;
        }

        /// <summary>
        /// The purchase order&#39;s issue date.
        /// </summary>
        /// <value>The purchase order&#39;s issue date.</value>
        [DataMember(Name = "issue_date", EmitDefaultValue = true)]
        public DateTime? IssueDate { get; set; }

        /// <summary>
        /// The purchase order&#39;s delivery date.
        /// </summary>
        /// <value>The purchase order&#39;s delivery date.</value>
        [DataMember(Name = "delivery_date", EmitDefaultValue = true)]
        public DateTime? DeliveryDate { get; set; }

        /// <summary>
        /// The purchase order&#39;s delivery address.
        /// </summary>
        /// <value>The purchase order&#39;s delivery address.</value>
        [DataMember(Name = "delivery_address", EmitDefaultValue = true)]
        public Guid? DeliveryAddress { get; set; }

        /// <summary>
        /// The purchase order&#39;s total amount.
        /// </summary>
        /// <value>The purchase order&#39;s total amount.</value>
        [DataMember(Name = "total_amount", EmitDefaultValue = true)]
        public float? TotalAmount { get; set; }

        /// <summary>
        /// Gets or Sets LineItems
        /// </summary>
        [DataMember(Name = "line_items", EmitDefaultValue = false)]
        public List<PurchaseOrderLineItem> LineItems { get; private set; }

        /// <summary>
        /// Returns false as LineItems should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLineItems()
        {
            return false;
        }

        /// <summary>
        /// When the third party&#39;s purchase order note was created.
        /// </summary>
        /// <value>When the third party&#39;s purchase order note was created.</value>
        [DataMember(Name = "remote_created_at", EmitDefaultValue = true)]
        public DateTime? RemoteCreatedAt { get; set; }

        /// <summary>
        /// When the third party&#39;s purchase order note was updated.
        /// </summary>
        /// <value>When the third party&#39;s purchase order note was updated.</value>
        [DataMember(Name = "remote_updated_at", EmitDefaultValue = true)]
        public DateTime? RemoteUpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PurchaseOrder {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RemoteId: ").Append(RemoteId).Append("\n");
            sb.Append("  RemoteData: ").Append(RemoteData).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  IssueDate: ").Append(IssueDate).Append("\n");
            sb.Append("  DeliveryDate: ").Append(DeliveryDate).Append("\n");
            sb.Append("  DeliveryAddress: ").Append(DeliveryAddress).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  RemoteCreatedAt: ").Append(RemoteCreatedAt).Append("\n");
            sb.Append("  RemoteUpdatedAt: ").Append(RemoteUpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PurchaseOrder);
        }

        /// <summary>
        /// Returns true if PurchaseOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of PurchaseOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PurchaseOrder input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.RemoteId == input.RemoteId ||
                    (this.RemoteId != null &&
                    this.RemoteId.Equals(input.RemoteId))
                ) && 
                (
                    this.RemoteData == input.RemoteData ||
                    this.RemoteData != null &&
                    input.RemoteData != null &&
                    this.RemoteData.SequenceEqual(input.RemoteData)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.IssueDate == input.IssueDate ||
                    (this.IssueDate != null &&
                    this.IssueDate.Equals(input.IssueDate))
                ) && 
                (
                    this.DeliveryDate == input.DeliveryDate ||
                    (this.DeliveryDate != null &&
                    this.DeliveryDate.Equals(input.DeliveryDate))
                ) && 
                (
                    this.DeliveryAddress == input.DeliveryAddress ||
                    (this.DeliveryAddress != null &&
                    this.DeliveryAddress.Equals(input.DeliveryAddress))
                ) && 
                (
                    this.TotalAmount == input.TotalAmount ||
                    (this.TotalAmount != null &&
                    this.TotalAmount.Equals(input.TotalAmount))
                ) && 
                (
                    this.Currency == input.Currency ||
                    this.Currency.Equals(input.Currency)
                ) && 
                (
                    this.LineItems == input.LineItems ||
                    this.LineItems != null &&
                    input.LineItems != null &&
                    this.LineItems.SequenceEqual(input.LineItems)
                ) && 
                (
                    this.RemoteCreatedAt == input.RemoteCreatedAt ||
                    (this.RemoteCreatedAt != null &&
                    this.RemoteCreatedAt.Equals(input.RemoteCreatedAt))
                ) && 
                (
                    this.RemoteUpdatedAt == input.RemoteUpdatedAt ||
                    (this.RemoteUpdatedAt != null &&
                    this.RemoteUpdatedAt.Equals(input.RemoteUpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.RemoteId != null)
                    hashCode = hashCode * 59 + this.RemoteId.GetHashCode();
                if (this.RemoteData != null)
                    hashCode = hashCode * 59 + this.RemoteData.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.IssueDate != null)
                    hashCode = hashCode * 59 + this.IssueDate.GetHashCode();
                if (this.DeliveryDate != null)
                    hashCode = hashCode * 59 + this.DeliveryDate.GetHashCode();
                if (this.DeliveryAddress != null)
                    hashCode = hashCode * 59 + this.DeliveryAddress.GetHashCode();
                if (this.TotalAmount != null)
                    hashCode = hashCode * 59 + this.TotalAmount.GetHashCode();
                hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.LineItems != null)
                    hashCode = hashCode * 59 + this.LineItems.GetHashCode();
                if (this.RemoteCreatedAt != null)
                    hashCode = hashCode * 59 + this.RemoteCreatedAt.GetHashCode();
                if (this.RemoteUpdatedAt != null)
                    hashCode = hashCode * 59 + this.RemoteUpdatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
