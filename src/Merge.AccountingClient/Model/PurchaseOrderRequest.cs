/*
 * Merge Accounting API
 *
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Merge.AccountingClient.Client.OpenAPIDateConverter;

namespace Merge.AccountingClient.Model
{
    /// <summary>
    /// # The PurchaseOrder Object ### Description The &#x60;PurchaseOrder&#x60; object is a record of request for a product or service between a buyer and seller.  ### Usage Example Fetch from the &#x60;LIST PurchaseOrders&#x60; endpoint and view a company&#39;s purchase orders.
    /// </summary>
    [DataContract(Name = "PurchaseOrderRequest")]
    public partial class PurchaseOrderRequest : IEquatable<PurchaseOrderRequest>, IValidatableObject
    {

        /// <summary>
        /// The purchase order&#39;s status.
        /// </summary>
        /// <value>The purchase order&#39;s status.</value>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public PurchaseOrderStatusEnum? Status { get; set; }

        /// <summary>
        /// The purchase order&#39;s currency.
        /// </summary>
        /// <value>The purchase order&#39;s currency.</value>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public CurrencyEnum? Currency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseOrderRequest" /> class.
        /// </summary>
        /// <param name="status">The purchase order&#39;s status..</param>
        /// <param name="issueDate">The purchase order&#39;s issue date..</param>
        /// <param name="deliveryDate">The purchase order&#39;s delivery date..</param>
        /// <param name="deliveryAddress">The purchase order&#39;s delivery address..</param>
        /// <param name="customer">The contact making the purchase order..</param>
        /// <param name="vendor">The party fulfilling the purchase order..</param>
        /// <param name="memo">A memo attached to the purchase order..</param>
        /// <param name="totalAmount">The purchase order&#39;s total amount..</param>
        /// <param name="currency">The purchase order&#39;s currency..</param>
        /// <param name="exchangeRate">The purchase order&#39;s exchange rate..</param>
        /// <param name="lineItems">lineItems.</param>
        /// <param name="integrationParams">integrationParams.</param>
        /// <param name="linkedAccountParams">linkedAccountParams.</param>
        public PurchaseOrderRequest(PurchaseOrderStatusEnum? status = default(PurchaseOrderStatusEnum?), DateTime? issueDate = default(DateTime?), DateTime? deliveryDate = default(DateTime?), Guid? deliveryAddress = default(Guid?), Guid? customer = default(Guid?), Guid? vendor = default(Guid?), string memo = default(string), float? totalAmount = default(float?), CurrencyEnum? currency = default(CurrencyEnum?), decimal? exchangeRate = default(decimal?), List<PurchaseOrderLineItemRequest> lineItems = default(List<PurchaseOrderLineItemRequest>), Dictionary<string, Object> integrationParams = default(Dictionary<string, Object>), Dictionary<string, Object> linkedAccountParams = default(Dictionary<string, Object>))
        {
            this.Status = status;
            this.IssueDate = issueDate;
            this.DeliveryDate = deliveryDate;
            this.DeliveryAddress = deliveryAddress;
            this.Customer = customer;
            this.Vendor = vendor;
            this.Memo = memo;
            this.TotalAmount = totalAmount;
            this.Currency = currency;
            this.ExchangeRate = exchangeRate;
            this.LineItems = lineItems;
            this.IntegrationParams = integrationParams;
            this.LinkedAccountParams = linkedAccountParams;
        }

        /// <summary>
        /// The purchase order&#39;s issue date.
        /// </summary>
        /// <value>The purchase order&#39;s issue date.</value>
        [DataMember(Name = "issue_date", EmitDefaultValue = true)]
        public DateTime? IssueDate { get; set; }

        /// <summary>
        /// The purchase order&#39;s delivery date.
        /// </summary>
        /// <value>The purchase order&#39;s delivery date.</value>
        [DataMember(Name = "delivery_date", EmitDefaultValue = true)]
        public DateTime? DeliveryDate { get; set; }

        /// <summary>
        /// The purchase order&#39;s delivery address.
        /// </summary>
        /// <value>The purchase order&#39;s delivery address.</value>
        [DataMember(Name = "delivery_address", EmitDefaultValue = true)]
        public Guid? DeliveryAddress { get; set; }

        /// <summary>
        /// The contact making the purchase order.
        /// </summary>
        /// <value>The contact making the purchase order.</value>
        [DataMember(Name = "customer", EmitDefaultValue = true)]
        public Guid? Customer { get; set; }

        /// <summary>
        /// The party fulfilling the purchase order.
        /// </summary>
        /// <value>The party fulfilling the purchase order.</value>
        [DataMember(Name = "vendor", EmitDefaultValue = true)]
        public Guid? Vendor { get; set; }

        /// <summary>
        /// A memo attached to the purchase order.
        /// </summary>
        /// <value>A memo attached to the purchase order.</value>
        [DataMember(Name = "memo", EmitDefaultValue = true)]
        public string Memo { get; set; }

        /// <summary>
        /// The purchase order&#39;s total amount.
        /// </summary>
        /// <value>The purchase order&#39;s total amount.</value>
        [DataMember(Name = "total_amount", EmitDefaultValue = true)]
        public float? TotalAmount { get; set; }

        /// <summary>
        /// The purchase order&#39;s exchange rate.
        /// </summary>
        /// <value>The purchase order&#39;s exchange rate.</value>
        [DataMember(Name = "exchange_rate", EmitDefaultValue = true)]
        public decimal? ExchangeRate { get; set; }

        /// <summary>
        /// Gets or Sets LineItems
        /// </summary>
        [DataMember(Name = "line_items", EmitDefaultValue = false)]
        public List<PurchaseOrderLineItemRequest> LineItems { get; set; }

        /// <summary>
        /// Gets or Sets IntegrationParams
        /// </summary>
        [DataMember(Name = "integration_params", EmitDefaultValue = true)]
        public Dictionary<string, Object> IntegrationParams { get; set; }

        /// <summary>
        /// Gets or Sets LinkedAccountParams
        /// </summary>
        [DataMember(Name = "linked_account_params", EmitDefaultValue = true)]
        public Dictionary<string, Object> LinkedAccountParams { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PurchaseOrderRequest {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  IssueDate: ").Append(IssueDate).Append("\n");
            sb.Append("  DeliveryDate: ").Append(DeliveryDate).Append("\n");
            sb.Append("  DeliveryAddress: ").Append(DeliveryAddress).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  Vendor: ").Append(Vendor).Append("\n");
            sb.Append("  Memo: ").Append(Memo).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  IntegrationParams: ").Append(IntegrationParams).Append("\n");
            sb.Append("  LinkedAccountParams: ").Append(LinkedAccountParams).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PurchaseOrderRequest);
        }

        /// <summary>
        /// Returns true if PurchaseOrderRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PurchaseOrderRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PurchaseOrderRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.IssueDate == input.IssueDate ||
                    (this.IssueDate != null &&
                    this.IssueDate.Equals(input.IssueDate))
                ) && 
                (
                    this.DeliveryDate == input.DeliveryDate ||
                    (this.DeliveryDate != null &&
                    this.DeliveryDate.Equals(input.DeliveryDate))
                ) && 
                (
                    this.DeliveryAddress == input.DeliveryAddress ||
                    (this.DeliveryAddress != null &&
                    this.DeliveryAddress.Equals(input.DeliveryAddress))
                ) && 
                (
                    this.Customer == input.Customer ||
                    (this.Customer != null &&
                    this.Customer.Equals(input.Customer))
                ) && 
                (
                    this.Vendor == input.Vendor ||
                    (this.Vendor != null &&
                    this.Vendor.Equals(input.Vendor))
                ) && 
                (
                    this.Memo == input.Memo ||
                    (this.Memo != null &&
                    this.Memo.Equals(input.Memo))
                ) && 
                (
                    this.TotalAmount == input.TotalAmount ||
                    (this.TotalAmount != null &&
                    this.TotalAmount.Equals(input.TotalAmount))
                ) && 
                (
                    this.Currency == input.Currency ||
                    this.Currency.Equals(input.Currency)
                ) && 
                (
                    this.ExchangeRate == input.ExchangeRate ||
                    (this.ExchangeRate != null &&
                    this.ExchangeRate.Equals(input.ExchangeRate))
                ) && 
                (
                    this.LineItems == input.LineItems ||
                    this.LineItems != null &&
                    input.LineItems != null &&
                    this.LineItems.SequenceEqual(input.LineItems)
                ) && 
                (
                    this.IntegrationParams == input.IntegrationParams ||
                    this.IntegrationParams != null &&
                    input.IntegrationParams != null &&
                    this.IntegrationParams.SequenceEqual(input.IntegrationParams)
                ) && 
                (
                    this.LinkedAccountParams == input.LinkedAccountParams ||
                    this.LinkedAccountParams != null &&
                    input.LinkedAccountParams != null &&
                    this.LinkedAccountParams.SequenceEqual(input.LinkedAccountParams)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.IssueDate != null)
                    hashCode = hashCode * 59 + this.IssueDate.GetHashCode();
                if (this.DeliveryDate != null)
                    hashCode = hashCode * 59 + this.DeliveryDate.GetHashCode();
                if (this.DeliveryAddress != null)
                    hashCode = hashCode * 59 + this.DeliveryAddress.GetHashCode();
                if (this.Customer != null)
                    hashCode = hashCode * 59 + this.Customer.GetHashCode();
                if (this.Vendor != null)
                    hashCode = hashCode * 59 + this.Vendor.GetHashCode();
                if (this.Memo != null)
                    hashCode = hashCode * 59 + this.Memo.GetHashCode();
                if (this.TotalAmount != null)
                    hashCode = hashCode * 59 + this.TotalAmount.GetHashCode();
                hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.ExchangeRate != null)
                    hashCode = hashCode * 59 + this.ExchangeRate.GetHashCode();
                if (this.LineItems != null)
                    hashCode = hashCode * 59 + this.LineItems.GetHashCode();
                if (this.IntegrationParams != null)
                    hashCode = hashCode * 59 + this.IntegrationParams.GetHashCode();
                if (this.LinkedAccountParams != null)
                    hashCode = hashCode * 59 + this.LinkedAccountParams.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ExchangeRate (decimal?) pattern
            Regex regexExchangeRate = new Regex(@"^\\d{0,32}(?:\\.\\d{0,16})?$", RegexOptions.CultureInvariant);
            if (false == regexExchangeRate.Match(this.ExchangeRate.ToString()).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExchangeRate, must match a pattern of " + regexExchangeRate, new [] { "ExchangeRate" });
            }

            yield break;
        }
    }

}
