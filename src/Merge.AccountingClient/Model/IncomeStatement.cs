/*
 * Merge Accounting API
 *
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Merge.AccountingClient.Client.OpenAPIDateConverter;

namespace Merge.AccountingClient.Model
{
    /// <summary>
    /// # The IncomeStatement Object ### Description The &#x60;IncomeStatement&#x60; object is used to represent a company&#39;s income statements.  ### Usage Example Fetch from the &#x60;GET IncomeStatement&#x60; endpoint and view a company&#39;s income statement for a given period.
    /// </summary>
    [DataContract(Name = "IncomeStatement")]
    public partial class IncomeStatement : IEquatable<IncomeStatement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IncomeStatement" /> class.
        /// </summary>
        /// <param name="remoteId">The third-party API ID of the matching object..</param>
        /// <param name="name">The income statement&#39;s name..</param>
        /// <param name="startPeriod">The income statement&#39;s start period..</param>
        /// <param name="endPeriod">The income statement&#39;s end period..</param>
        /// <param name="grossProfit">The income statement&#39;s gross profit..</param>
        /// <param name="netOperatingIncome">The income statement&#39;s net operating profit..</param>
        /// <param name="netIncome">The income statement&#39;s net income..</param>
        public IncomeStatement(string remoteId = default(string), string name = default(string), DateTime? startPeriod = default(DateTime?), DateTime? endPeriod = default(DateTime?), float? grossProfit = default(float?), float? netOperatingIncome = default(float?), float? netIncome = default(float?))
        {
            this.RemoteId = remoteId;
            this.Name = name;
            this.StartPeriod = startPeriod;
            this.EndPeriod = endPeriod;
            this.GrossProfit = grossProfit;
            this.NetOperatingIncome = netOperatingIncome;
            this.NetIncome = netIncome;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }

        /// <summary>
        /// The third-party API ID of the matching object.
        /// </summary>
        /// <value>The third-party API ID of the matching object.</value>
        [DataMember(Name = "remote_id", EmitDefaultValue = true)]
        public string RemoteId { get; set; }

        /// <summary>
        /// Gets or Sets RemoteData
        /// </summary>
        [DataMember(Name = "remote_data", EmitDefaultValue = true)]
        public List<RemoteData> RemoteData { get; private set; }

        /// <summary>
        /// Returns false as RemoteData should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRemoteData()
        {
            return false;
        }

        /// <summary>
        /// The income statement&#39;s name.
        /// </summary>
        /// <value>The income statement&#39;s name.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The income statement&#39;s start period.
        /// </summary>
        /// <value>The income statement&#39;s start period.</value>
        [DataMember(Name = "start_period", EmitDefaultValue = true)]
        public DateTime? StartPeriod { get; set; }

        /// <summary>
        /// The income statement&#39;s end period.
        /// </summary>
        /// <value>The income statement&#39;s end period.</value>
        [DataMember(Name = "end_period", EmitDefaultValue = true)]
        public DateTime? EndPeriod { get; set; }

        /// <summary>
        /// Gets or Sets Income
        /// </summary>
        [DataMember(Name = "income", EmitDefaultValue = false)]
        public List<ReportItem> Income { get; private set; }

        /// <summary>
        /// Returns false as Income should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIncome()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets CostOfSales
        /// </summary>
        [DataMember(Name = "cost_of_sales", EmitDefaultValue = false)]
        public List<ReportItem> CostOfSales { get; private set; }

        /// <summary>
        /// Returns false as CostOfSales should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCostOfSales()
        {
            return false;
        }

        /// <summary>
        /// The income statement&#39;s gross profit.
        /// </summary>
        /// <value>The income statement&#39;s gross profit.</value>
        [DataMember(Name = "gross_profit", EmitDefaultValue = true)]
        public float? GrossProfit { get; set; }

        /// <summary>
        /// Gets or Sets OperatingExpenses
        /// </summary>
        [DataMember(Name = "operating_expenses", EmitDefaultValue = false)]
        public List<ReportItem> OperatingExpenses { get; private set; }

        /// <summary>
        /// Returns false as OperatingExpenses should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOperatingExpenses()
        {
            return false;
        }

        /// <summary>
        /// The income statement&#39;s net operating profit.
        /// </summary>
        /// <value>The income statement&#39;s net operating profit.</value>
        [DataMember(Name = "net_operating_income", EmitDefaultValue = true)]
        public float? NetOperatingIncome { get; set; }

        /// <summary>
        /// Gets or Sets NonOperatingExpenses
        /// </summary>
        [DataMember(Name = "non_operating_expenses", EmitDefaultValue = false)]
        public List<ReportItem> NonOperatingExpenses { get; private set; }

        /// <summary>
        /// Returns false as NonOperatingExpenses should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNonOperatingExpenses()
        {
            return false;
        }

        /// <summary>
        /// The income statement&#39;s net income.
        /// </summary>
        /// <value>The income statement&#39;s net income.</value>
        [DataMember(Name = "net_income", EmitDefaultValue = true)]
        public float? NetIncome { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IncomeStatement {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RemoteId: ").Append(RemoteId).Append("\n");
            sb.Append("  RemoteData: ").Append(RemoteData).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  StartPeriod: ").Append(StartPeriod).Append("\n");
            sb.Append("  EndPeriod: ").Append(EndPeriod).Append("\n");
            sb.Append("  Income: ").Append(Income).Append("\n");
            sb.Append("  CostOfSales: ").Append(CostOfSales).Append("\n");
            sb.Append("  GrossProfit: ").Append(GrossProfit).Append("\n");
            sb.Append("  OperatingExpenses: ").Append(OperatingExpenses).Append("\n");
            sb.Append("  NetOperatingIncome: ").Append(NetOperatingIncome).Append("\n");
            sb.Append("  NonOperatingExpenses: ").Append(NonOperatingExpenses).Append("\n");
            sb.Append("  NetIncome: ").Append(NetIncome).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IncomeStatement);
        }

        /// <summary>
        /// Returns true if IncomeStatement instances are equal
        /// </summary>
        /// <param name="input">Instance of IncomeStatement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IncomeStatement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.RemoteId == input.RemoteId ||
                    (this.RemoteId != null &&
                    this.RemoteId.Equals(input.RemoteId))
                ) && 
                (
                    this.RemoteData == input.RemoteData ||
                    this.RemoteData != null &&
                    input.RemoteData != null &&
                    this.RemoteData.SequenceEqual(input.RemoteData)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.StartPeriod == input.StartPeriod ||
                    (this.StartPeriod != null &&
                    this.StartPeriod.Equals(input.StartPeriod))
                ) && 
                (
                    this.EndPeriod == input.EndPeriod ||
                    (this.EndPeriod != null &&
                    this.EndPeriod.Equals(input.EndPeriod))
                ) && 
                (
                    this.Income == input.Income ||
                    this.Income != null &&
                    input.Income != null &&
                    this.Income.SequenceEqual(input.Income)
                ) && 
                (
                    this.CostOfSales == input.CostOfSales ||
                    this.CostOfSales != null &&
                    input.CostOfSales != null &&
                    this.CostOfSales.SequenceEqual(input.CostOfSales)
                ) && 
                (
                    this.GrossProfit == input.GrossProfit ||
                    (this.GrossProfit != null &&
                    this.GrossProfit.Equals(input.GrossProfit))
                ) && 
                (
                    this.OperatingExpenses == input.OperatingExpenses ||
                    this.OperatingExpenses != null &&
                    input.OperatingExpenses != null &&
                    this.OperatingExpenses.SequenceEqual(input.OperatingExpenses)
                ) && 
                (
                    this.NetOperatingIncome == input.NetOperatingIncome ||
                    (this.NetOperatingIncome != null &&
                    this.NetOperatingIncome.Equals(input.NetOperatingIncome))
                ) && 
                (
                    this.NonOperatingExpenses == input.NonOperatingExpenses ||
                    this.NonOperatingExpenses != null &&
                    input.NonOperatingExpenses != null &&
                    this.NonOperatingExpenses.SequenceEqual(input.NonOperatingExpenses)
                ) && 
                (
                    this.NetIncome == input.NetIncome ||
                    (this.NetIncome != null &&
                    this.NetIncome.Equals(input.NetIncome))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.RemoteId != null)
                    hashCode = hashCode * 59 + this.RemoteId.GetHashCode();
                if (this.RemoteData != null)
                    hashCode = hashCode * 59 + this.RemoteData.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.StartPeriod != null)
                    hashCode = hashCode * 59 + this.StartPeriod.GetHashCode();
                if (this.EndPeriod != null)
                    hashCode = hashCode * 59 + this.EndPeriod.GetHashCode();
                if (this.Income != null)
                    hashCode = hashCode * 59 + this.Income.GetHashCode();
                if (this.CostOfSales != null)
                    hashCode = hashCode * 59 + this.CostOfSales.GetHashCode();
                if (this.GrossProfit != null)
                    hashCode = hashCode * 59 + this.GrossProfit.GetHashCode();
                if (this.OperatingExpenses != null)
                    hashCode = hashCode * 59 + this.OperatingExpenses.GetHashCode();
                if (this.NetOperatingIncome != null)
                    hashCode = hashCode * 59 + this.NetOperatingIncome.GetHashCode();
                if (this.NonOperatingExpenses != null)
                    hashCode = hashCode * 59 + this.NonOperatingExpenses.GetHashCode();
                if (this.NetIncome != null)
                    hashCode = hashCode * 59 + this.NetIncome.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
