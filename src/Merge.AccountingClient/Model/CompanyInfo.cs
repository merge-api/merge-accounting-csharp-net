/*
 * Merge Accounting API
 *
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Merge.AccountingClient.Client.OpenAPIDateConverter;

namespace Merge.AccountingClient.Model
{
    /// <summary>
    /// # The CompanyInfo Object ### Description The &#x60;CompanyInfo&#x60; object is used to represent a company&#39;s information.  ### Usage Example Fetch from the &#x60;GET CompanyInfo&#x60; endpoint and view a company&#39;s information.
    /// </summary>
    [DataContract(Name = "CompanyInfo")]
    public partial class CompanyInfo : IEquatable<CompanyInfo>, IValidatableObject
    {

        /// <summary>
        /// The currency set in the company&#39;s accounting platform.
        /// </summary>
        /// <value>The currency set in the company&#39;s accounting platform.</value>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public CurrencyEnum? Currency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyInfo" /> class.
        /// </summary>
        /// <param name="remoteId">The third-party API ID of the matching object..</param>
        /// <param name="name">The company&#39;s name..</param>
        /// <param name="legalName">The company&#39;s legal name..</param>
        /// <param name="taxNumber">The company&#39;s tax number..</param>
        /// <param name="fiscalYearEndMonth">The company&#39;s fiscal year end month..</param>
        /// <param name="fiscalYearEndDay">The company&#39;s fiscal year end day..</param>
        /// <param name="currency">The currency set in the company&#39;s accounting platform..</param>
        /// <param name="remoteCreatedAt">When the third party&#39;s company was created..</param>
        /// <param name="urls">The company&#39;s urls..</param>
        /// <param name="addresses">addresses.</param>
        /// <param name="phoneNumbers">phoneNumbers.</param>
        public CompanyInfo(string remoteId = default(string), string name = default(string), string legalName = default(string), string taxNumber = default(string), int? fiscalYearEndMonth = default(int?), int? fiscalYearEndDay = default(int?), CurrencyEnum? currency = default(CurrencyEnum?), DateTime? remoteCreatedAt = default(DateTime?), List<string> urls = default(List<string>), List<Address> addresses = default(List<Address>), List<AccountingPhoneNumber> phoneNumbers = default(List<AccountingPhoneNumber>))
        {
            this.RemoteId = remoteId;
            this.Name = name;
            this.LegalName = legalName;
            this.TaxNumber = taxNumber;
            this.FiscalYearEndMonth = fiscalYearEndMonth;
            this.FiscalYearEndDay = fiscalYearEndDay;
            this.Currency = currency;
            this.RemoteCreatedAt = remoteCreatedAt;
            this.Urls = urls;
            this.Addresses = addresses;
            this.PhoneNumbers = phoneNumbers;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }

        /// <summary>
        /// The third-party API ID of the matching object.
        /// </summary>
        /// <value>The third-party API ID of the matching object.</value>
        [DataMember(Name = "remote_id", EmitDefaultValue = true)]
        public string RemoteId { get; set; }

        /// <summary>
        /// Gets or Sets RemoteData
        /// </summary>
        [DataMember(Name = "remote_data", EmitDefaultValue = true)]
        public List<RemoteData> RemoteData { get; private set; }

        /// <summary>
        /// Returns false as RemoteData should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRemoteData()
        {
            return false;
        }

        /// <summary>
        /// The company&#39;s name.
        /// </summary>
        /// <value>The company&#39;s name.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The company&#39;s legal name.
        /// </summary>
        /// <value>The company&#39;s legal name.</value>
        [DataMember(Name = "legal_name", EmitDefaultValue = true)]
        public string LegalName { get; set; }

        /// <summary>
        /// The company&#39;s tax number.
        /// </summary>
        /// <value>The company&#39;s tax number.</value>
        [DataMember(Name = "tax_number", EmitDefaultValue = true)]
        public string TaxNumber { get; set; }

        /// <summary>
        /// The company&#39;s fiscal year end month.
        /// </summary>
        /// <value>The company&#39;s fiscal year end month.</value>
        [DataMember(Name = "fiscal_year_end_month", EmitDefaultValue = true)]
        public int? FiscalYearEndMonth { get; set; }

        /// <summary>
        /// The company&#39;s fiscal year end day.
        /// </summary>
        /// <value>The company&#39;s fiscal year end day.</value>
        [DataMember(Name = "fiscal_year_end_day", EmitDefaultValue = true)]
        public int? FiscalYearEndDay { get; set; }

        /// <summary>
        /// When the third party&#39;s company was created.
        /// </summary>
        /// <value>When the third party&#39;s company was created.</value>
        [DataMember(Name = "remote_created_at", EmitDefaultValue = true)]
        public DateTime? RemoteCreatedAt { get; set; }

        /// <summary>
        /// The company&#39;s urls.
        /// </summary>
        /// <value>The company&#39;s urls.</value>
        [DataMember(Name = "urls", EmitDefaultValue = true)]
        public List<string> Urls { get; set; }

        /// <summary>
        /// Gets or Sets Addresses
        /// </summary>
        [DataMember(Name = "addresses", EmitDefaultValue = false)]
        public List<Address> Addresses { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumbers
        /// </summary>
        [DataMember(Name = "phone_numbers", EmitDefaultValue = false)]
        public List<AccountingPhoneNumber> PhoneNumbers { get; set; }

        /// <summary>
        /// Indicates whether or not this object has been deleted by third party webhooks.
        /// </summary>
        /// <value>Indicates whether or not this object has been deleted by third party webhooks.</value>
        [DataMember(Name = "remote_was_deleted", EmitDefaultValue = true)]
        public bool RemoteWasDeleted { get; private set; }

        /// <summary>
        /// Returns false as RemoteWasDeleted should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRemoteWasDeleted()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets FieldMappings
        /// </summary>
        [DataMember(Name = "field_mappings", EmitDefaultValue = true)]
        public Dictionary<string, Object> FieldMappings { get; private set; }

        /// <summary>
        /// Returns false as FieldMappings should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFieldMappings()
        {
            return false;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompanyInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RemoteId: ").Append(RemoteId).Append("\n");
            sb.Append("  RemoteData: ").Append(RemoteData).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  LegalName: ").Append(LegalName).Append("\n");
            sb.Append("  TaxNumber: ").Append(TaxNumber).Append("\n");
            sb.Append("  FiscalYearEndMonth: ").Append(FiscalYearEndMonth).Append("\n");
            sb.Append("  FiscalYearEndDay: ").Append(FiscalYearEndDay).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  RemoteCreatedAt: ").Append(RemoteCreatedAt).Append("\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  PhoneNumbers: ").Append(PhoneNumbers).Append("\n");
            sb.Append("  RemoteWasDeleted: ").Append(RemoteWasDeleted).Append("\n");
            sb.Append("  FieldMappings: ").Append(FieldMappings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompanyInfo);
        }

        /// <summary>
        /// Returns true if CompanyInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of CompanyInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.RemoteId == input.RemoteId ||
                    (this.RemoteId != null &&
                    this.RemoteId.Equals(input.RemoteId))
                ) && 
                (
                    this.RemoteData == input.RemoteData ||
                    this.RemoteData != null &&
                    input.RemoteData != null &&
                    this.RemoteData.SequenceEqual(input.RemoteData)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.LegalName == input.LegalName ||
                    (this.LegalName != null &&
                    this.LegalName.Equals(input.LegalName))
                ) && 
                (
                    this.TaxNumber == input.TaxNumber ||
                    (this.TaxNumber != null &&
                    this.TaxNumber.Equals(input.TaxNumber))
                ) && 
                (
                    this.FiscalYearEndMonth == input.FiscalYearEndMonth ||
                    (this.FiscalYearEndMonth != null &&
                    this.FiscalYearEndMonth.Equals(input.FiscalYearEndMonth))
                ) && 
                (
                    this.FiscalYearEndDay == input.FiscalYearEndDay ||
                    (this.FiscalYearEndDay != null &&
                    this.FiscalYearEndDay.Equals(input.FiscalYearEndDay))
                ) && 
                (
                    this.Currency == input.Currency ||
                    this.Currency.Equals(input.Currency)
                ) && 
                (
                    this.RemoteCreatedAt == input.RemoteCreatedAt ||
                    (this.RemoteCreatedAt != null &&
                    this.RemoteCreatedAt.Equals(input.RemoteCreatedAt))
                ) && 
                (
                    this.Urls == input.Urls ||
                    this.Urls != null &&
                    input.Urls != null &&
                    this.Urls.SequenceEqual(input.Urls)
                ) && 
                (
                    this.Addresses == input.Addresses ||
                    this.Addresses != null &&
                    input.Addresses != null &&
                    this.Addresses.SequenceEqual(input.Addresses)
                ) && 
                (
                    this.PhoneNumbers == input.PhoneNumbers ||
                    this.PhoneNumbers != null &&
                    input.PhoneNumbers != null &&
                    this.PhoneNumbers.SequenceEqual(input.PhoneNumbers)
                ) && 
                (
                    this.RemoteWasDeleted == input.RemoteWasDeleted ||
                    this.RemoteWasDeleted.Equals(input.RemoteWasDeleted)
                ) && 
                (
                    this.FieldMappings == input.FieldMappings ||
                    this.FieldMappings != null &&
                    input.FieldMappings != null &&
                    this.FieldMappings.SequenceEqual(input.FieldMappings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.RemoteId != null)
                    hashCode = hashCode * 59 + this.RemoteId.GetHashCode();
                if (this.RemoteData != null)
                    hashCode = hashCode * 59 + this.RemoteData.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.LegalName != null)
                    hashCode = hashCode * 59 + this.LegalName.GetHashCode();
                if (this.TaxNumber != null)
                    hashCode = hashCode * 59 + this.TaxNumber.GetHashCode();
                if (this.FiscalYearEndMonth != null)
                    hashCode = hashCode * 59 + this.FiscalYearEndMonth.GetHashCode();
                if (this.FiscalYearEndDay != null)
                    hashCode = hashCode * 59 + this.FiscalYearEndDay.GetHashCode();
                hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.RemoteCreatedAt != null)
                    hashCode = hashCode * 59 + this.RemoteCreatedAt.GetHashCode();
                if (this.Urls != null)
                    hashCode = hashCode * 59 + this.Urls.GetHashCode();
                if (this.Addresses != null)
                    hashCode = hashCode * 59 + this.Addresses.GetHashCode();
                if (this.PhoneNumbers != null)
                    hashCode = hashCode * 59 + this.PhoneNumbers.GetHashCode();
                hashCode = hashCode * 59 + this.RemoteWasDeleted.GetHashCode();
                if (this.FieldMappings != null)
                    hashCode = hashCode * 59 + this.FieldMappings.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FiscalYearEndMonth (int?) maximum
            if(this.FiscalYearEndMonth > (int?)12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FiscalYearEndMonth, must be a value less than or equal to 12.", new [] { "FiscalYearEndMonth" });
            }

            // FiscalYearEndMonth (int?) minimum
            if(this.FiscalYearEndMonth < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FiscalYearEndMonth, must be a value greater than or equal to 1.", new [] { "FiscalYearEndMonth" });
            }

            // FiscalYearEndDay (int?) maximum
            if(this.FiscalYearEndDay > (int?)31)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FiscalYearEndDay, must be a value less than or equal to 31.", new [] { "FiscalYearEndDay" });
            }

            // FiscalYearEndDay (int?) minimum
            if(this.FiscalYearEndDay < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FiscalYearEndDay, must be a value greater than or equal to 1.", new [] { "FiscalYearEndDay" });
            }

            yield break;
        }
    }

}
