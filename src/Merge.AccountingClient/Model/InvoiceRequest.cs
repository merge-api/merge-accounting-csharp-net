/*
 * Merge Accounting API
 *
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Merge.AccountingClient.Client.OpenAPIDateConverter;

namespace Merge.AccountingClient.Model
{
    /// <summary>
    /// # The Invoice Object ### Description The &#x60;Invoice&#x60; object is used to represent a company&#39;s invoices.  ### Usage Example Fetch from the &#x60;LIST Invoices&#x60; endpoint and view a company&#39;s invoices.
    /// </summary>
    [DataContract(Name = "InvoiceRequest")]
    public partial class InvoiceRequest : IEquatable<InvoiceRequest>, IValidatableObject
    {

        /// <summary>
        /// The invoice&#39;s type.
        /// </summary>
        /// <value>The invoice&#39;s type.</value>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// The invoice&#39;s currency.
        /// </summary>
        /// <value>The invoice&#39;s currency.</value>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public string Currency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceRequest" /> class.
        /// </summary>
        /// <param name="remoteId">The third-party API ID of the matching object..</param>
        /// <param name="type">The invoice&#39;s type..</param>
        /// <param name="contact">contact.</param>
        /// <param name="number">The invoice&#39;s number..</param>
        /// <param name="issueDate">The invoice&#39;s issue date..</param>
        /// <param name="dueDate">The invoice&#39;s due date..</param>
        /// <param name="paidOnDate">The invoice&#39;s paid date..</param>
        /// <param name="memo">The invoice&#39;s private note..</param>
        /// <param name="currency">The invoice&#39;s currency..</param>
        /// <param name="totalDiscount">The invoice&#39;s total discount..</param>
        /// <param name="subTotal">The invoice&#39;s sub-total..</param>
        /// <param name="totalTaxAmount">The invoice&#39;s total tax amount..</param>
        /// <param name="totalAmount">The invoice&#39;s total amount..</param>
        /// <param name="balance">The invoice&#39;s remaining balance..</param>
        /// <param name="remoteUpdatedAt">When the third party&#39;s invoice entry was updated..</param>
        /// <param name="payments">Array of &#x60;Payment&#x60; object IDs..</param>
        public InvoiceRequest(string remoteId = default(string), string type = default(string), Guid? contact = default(Guid?), string number = default(string), DateTime? issueDate = default(DateTime?), DateTime? dueDate = default(DateTime?), DateTime? paidOnDate = default(DateTime?), string memo = default(string), string currency = default(string), float? totalDiscount = default(float?), float? subTotal = default(float?), float? totalTaxAmount = default(float?), float? totalAmount = default(float?), float? balance = default(float?), DateTime? remoteUpdatedAt = default(DateTime?), List<Guid?> payments = default(List<Guid?>))
        {
            this.RemoteId = remoteId;
            this.Type = type;
            this.Contact = contact;
            this.Number = number;
            this.IssueDate = issueDate;
            this.DueDate = dueDate;
            this.PaidOnDate = paidOnDate;
            this.Memo = memo;
            this.Currency = currency;
            this.TotalDiscount = totalDiscount;
            this.SubTotal = subTotal;
            this.TotalTaxAmount = totalTaxAmount;
            this.TotalAmount = totalAmount;
            this.Balance = balance;
            this.RemoteUpdatedAt = remoteUpdatedAt;
            this.Payments = payments;
        }

        /// <summary>
        /// The third-party API ID of the matching object.
        /// </summary>
        /// <value>The third-party API ID of the matching object.</value>
        [DataMember(Name = "remote_id", EmitDefaultValue = true)]
        public string RemoteId { get; set; }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [DataMember(Name = "contact", EmitDefaultValue = true)]
        public Guid? Contact { get; set; }

        /// <summary>
        /// The invoice&#39;s number.
        /// </summary>
        /// <value>The invoice&#39;s number.</value>
        [DataMember(Name = "number", EmitDefaultValue = true)]
        public string Number { get; set; }

        /// <summary>
        /// The invoice&#39;s issue date.
        /// </summary>
        /// <value>The invoice&#39;s issue date.</value>
        [DataMember(Name = "issue_date", EmitDefaultValue = true)]
        public DateTime? IssueDate { get; set; }

        /// <summary>
        /// The invoice&#39;s due date.
        /// </summary>
        /// <value>The invoice&#39;s due date.</value>
        [DataMember(Name = "due_date", EmitDefaultValue = true)]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// The invoice&#39;s paid date.
        /// </summary>
        /// <value>The invoice&#39;s paid date.</value>
        [DataMember(Name = "paid_on_date", EmitDefaultValue = true)]
        public DateTime? PaidOnDate { get; set; }

        /// <summary>
        /// The invoice&#39;s private note.
        /// </summary>
        /// <value>The invoice&#39;s private note.</value>
        [DataMember(Name = "memo", EmitDefaultValue = true)]
        public string Memo { get; set; }

        /// <summary>
        /// The invoice&#39;s total discount.
        /// </summary>
        /// <value>The invoice&#39;s total discount.</value>
        [DataMember(Name = "total_discount", EmitDefaultValue = true)]
        public float? TotalDiscount { get; set; }

        /// <summary>
        /// The invoice&#39;s sub-total.
        /// </summary>
        /// <value>The invoice&#39;s sub-total.</value>
        [DataMember(Name = "sub_total", EmitDefaultValue = true)]
        public float? SubTotal { get; set; }

        /// <summary>
        /// The invoice&#39;s total tax amount.
        /// </summary>
        /// <value>The invoice&#39;s total tax amount.</value>
        [DataMember(Name = "total_tax_amount", EmitDefaultValue = true)]
        public float? TotalTaxAmount { get; set; }

        /// <summary>
        /// The invoice&#39;s total amount.
        /// </summary>
        /// <value>The invoice&#39;s total amount.</value>
        [DataMember(Name = "total_amount", EmitDefaultValue = true)]
        public float? TotalAmount { get; set; }

        /// <summary>
        /// The invoice&#39;s remaining balance.
        /// </summary>
        /// <value>The invoice&#39;s remaining balance.</value>
        [DataMember(Name = "balance", EmitDefaultValue = true)]
        public float? Balance { get; set; }

        /// <summary>
        /// When the third party&#39;s invoice entry was updated.
        /// </summary>
        /// <value>When the third party&#39;s invoice entry was updated.</value>
        [DataMember(Name = "remote_updated_at", EmitDefaultValue = true)]
        public DateTime? RemoteUpdatedAt { get; set; }

        /// <summary>
        /// Array of &#x60;Payment&#x60; object IDs.
        /// </summary>
        /// <value>Array of &#x60;Payment&#x60; object IDs.</value>
        [DataMember(Name = "payments", EmitDefaultValue = false)]
        public List<Guid?> Payments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvoiceRequest {\n");
            sb.Append("  RemoteId: ").Append(RemoteId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  IssueDate: ").Append(IssueDate).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  PaidOnDate: ").Append(PaidOnDate).Append("\n");
            sb.Append("  Memo: ").Append(Memo).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  TotalDiscount: ").Append(TotalDiscount).Append("\n");
            sb.Append("  SubTotal: ").Append(SubTotal).Append("\n");
            sb.Append("  TotalTaxAmount: ").Append(TotalTaxAmount).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  RemoteUpdatedAt: ").Append(RemoteUpdatedAt).Append("\n");
            sb.Append("  Payments: ").Append(Payments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvoiceRequest);
        }

        /// <summary>
        /// Returns true if InvoiceRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of InvoiceRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoiceRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RemoteId == input.RemoteId ||
                    (this.RemoteId != null &&
                    this.RemoteId.Equals(input.RemoteId))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Contact == input.Contact ||
                    (this.Contact != null &&
                    this.Contact.Equals(input.Contact))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.IssueDate == input.IssueDate ||
                    (this.IssueDate != null &&
                    this.IssueDate.Equals(input.IssueDate))
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.PaidOnDate == input.PaidOnDate ||
                    (this.PaidOnDate != null &&
                    this.PaidOnDate.Equals(input.PaidOnDate))
                ) && 
                (
                    this.Memo == input.Memo ||
                    (this.Memo != null &&
                    this.Memo.Equals(input.Memo))
                ) && 
                (
                    this.Currency == input.Currency ||
                    this.Currency.Equals(input.Currency)
                ) && 
                (
                    this.TotalDiscount == input.TotalDiscount ||
                    (this.TotalDiscount != null &&
                    this.TotalDiscount.Equals(input.TotalDiscount))
                ) && 
                (
                    this.SubTotal == input.SubTotal ||
                    (this.SubTotal != null &&
                    this.SubTotal.Equals(input.SubTotal))
                ) && 
                (
                    this.TotalTaxAmount == input.TotalTaxAmount ||
                    (this.TotalTaxAmount != null &&
                    this.TotalTaxAmount.Equals(input.TotalTaxAmount))
                ) && 
                (
                    this.TotalAmount == input.TotalAmount ||
                    (this.TotalAmount != null &&
                    this.TotalAmount.Equals(input.TotalAmount))
                ) && 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                ) && 
                (
                    this.RemoteUpdatedAt == input.RemoteUpdatedAt ||
                    (this.RemoteUpdatedAt != null &&
                    this.RemoteUpdatedAt.Equals(input.RemoteUpdatedAt))
                ) && 
                (
                    this.Payments == input.Payments ||
                    this.Payments != null &&
                    input.Payments != null &&
                    this.Payments.SequenceEqual(input.Payments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RemoteId != null)
                    hashCode = hashCode * 59 + this.RemoteId.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Contact != null)
                    hashCode = hashCode * 59 + this.Contact.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.IssueDate != null)
                    hashCode = hashCode * 59 + this.IssueDate.GetHashCode();
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                if (this.PaidOnDate != null)
                    hashCode = hashCode * 59 + this.PaidOnDate.GetHashCode();
                if (this.Memo != null)
                    hashCode = hashCode * 59 + this.Memo.GetHashCode();
                hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.TotalDiscount != null)
                    hashCode = hashCode * 59 + this.TotalDiscount.GetHashCode();
                if (this.SubTotal != null)
                    hashCode = hashCode * 59 + this.SubTotal.GetHashCode();
                if (this.TotalTaxAmount != null)
                    hashCode = hashCode * 59 + this.TotalTaxAmount.GetHashCode();
                if (this.TotalAmount != null)
                    hashCode = hashCode * 59 + this.TotalAmount.GetHashCode();
                if (this.Balance != null)
                    hashCode = hashCode * 59 + this.Balance.GetHashCode();
                if (this.RemoteUpdatedAt != null)
                    hashCode = hashCode * 59 + this.RemoteUpdatedAt.GetHashCode();
                if (this.Payments != null)
                    hashCode = hashCode * 59 + this.Payments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
