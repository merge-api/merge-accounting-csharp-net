/*
 * Merge Accounting API
 *
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Merge.AccountingClient.Client.OpenAPIDateConverter;

namespace Merge.AccountingClient.Model
{
    /// <summary>
    /// # The TransactionLineItem Object ### Description The &#x60;TransactionLineItem&#x60; object is used to represent a transaction&#39;s line items.  ### Usage Example Fetch from the &#x60;GET TransactionLineItem&#x60; endpoint and view the transaction&#39;s line items.
    /// </summary>
    [DataContract(Name = "TransactionLineItem")]
    public partial class TransactionLineItem : IEquatable<TransactionLineItem>, IValidatableObject
    {

        /// <summary>
        /// The line item&#39;s currency.
        /// </summary>
        /// <value>The line item&#39;s currency.</value>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public CurrencyEnum? Currency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionLineItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionLineItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionLineItem" /> class.
        /// </summary>
        /// <param name="memo">An internal note used by the business to clarify purpose of the transaction..</param>
        /// <param name="unitPrice">The line item&#39;s unit price..</param>
        /// <param name="quantity">The line item&#39;s quantity..</param>
        /// <param name="item">item.</param>
        /// <param name="account">The line item&#39;s account..</param>
        /// <param name="trackingCategory">The line&#39;s associated tracking category..</param>
        /// <param name="trackingCategories">The line&#39;s associated tracking categories. (required).</param>
        /// <param name="totalLineAmount">The line item&#39;s total..</param>
        /// <param name="taxRate">The line item&#39;s tax rate..</param>
        /// <param name="currency">The line item&#39;s currency..</param>
        /// <param name="exchangeRate">The line item&#39;s exchange rate..</param>
        /// <param name="company">The company the line belongs to..</param>
        public TransactionLineItem(string memo = default(string), decimal? unitPrice = default(decimal?), decimal? quantity = default(decimal?), Guid? item = default(Guid?), Guid? account = default(Guid?), Guid? trackingCategory = default(Guid?), List<Guid> trackingCategories = default(List<Guid>), decimal? totalLineAmount = default(decimal?), Guid? taxRate = default(Guid?), CurrencyEnum? currency = default(CurrencyEnum?), decimal? exchangeRate = default(decimal?), Guid? company = default(Guid?))
        {
            // to ensure "trackingCategories" is required (not null)
            this.TrackingCategories = trackingCategories ?? throw new ArgumentNullException("trackingCategories is a required property for TransactionLineItem and cannot be null");
            this.Memo = memo;
            this.UnitPrice = unitPrice;
            this.Quantity = quantity;
            this.Item = item;
            this.Account = account;
            this.TrackingCategory = trackingCategory;
            this.TotalLineAmount = totalLineAmount;
            this.TaxRate = taxRate;
            this.Currency = currency;
            this.ExchangeRate = exchangeRate;
            this.Company = company;
        }

        /// <summary>
        /// An internal note used by the business to clarify purpose of the transaction.
        /// </summary>
        /// <value>An internal note used by the business to clarify purpose of the transaction.</value>
        [DataMember(Name = "memo", EmitDefaultValue = true)]
        public string Memo { get; set; }

        /// <summary>
        /// The line item&#39;s unit price.
        /// </summary>
        /// <value>The line item&#39;s unit price.</value>
        [DataMember(Name = "unit_price", EmitDefaultValue = true)]
        public decimal? UnitPrice { get; set; }

        /// <summary>
        /// The line item&#39;s quantity.
        /// </summary>
        /// <value>The line item&#39;s quantity.</value>
        [DataMember(Name = "quantity", EmitDefaultValue = true)]
        public decimal? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets Item
        /// </summary>
        [DataMember(Name = "item", EmitDefaultValue = true)]
        public Guid? Item { get; set; }

        /// <summary>
        /// The line item&#39;s account.
        /// </summary>
        /// <value>The line item&#39;s account.</value>
        [DataMember(Name = "account", EmitDefaultValue = true)]
        public Guid? Account { get; set; }

        /// <summary>
        /// The line&#39;s associated tracking category.
        /// </summary>
        /// <value>The line&#39;s associated tracking category.</value>
        [DataMember(Name = "tracking_category", EmitDefaultValue = true)]
        public Guid? TrackingCategory { get; set; }

        /// <summary>
        /// The line&#39;s associated tracking categories.
        /// </summary>
        /// <value>The line&#39;s associated tracking categories.</value>
        [DataMember(Name = "tracking_categories", IsRequired = true, EmitDefaultValue = false)]
        public List<Guid> TrackingCategories { get; set; }

        /// <summary>
        /// The line item&#39;s total.
        /// </summary>
        /// <value>The line item&#39;s total.</value>
        [DataMember(Name = "total_line_amount", EmitDefaultValue = true)]
        public decimal? TotalLineAmount { get; set; }

        /// <summary>
        /// The line item&#39;s tax rate.
        /// </summary>
        /// <value>The line item&#39;s tax rate.</value>
        [DataMember(Name = "tax_rate", EmitDefaultValue = true)]
        public Guid? TaxRate { get; set; }

        /// <summary>
        /// The line item&#39;s exchange rate.
        /// </summary>
        /// <value>The line item&#39;s exchange rate.</value>
        [DataMember(Name = "exchange_rate", EmitDefaultValue = true)]
        public decimal? ExchangeRate { get; set; }

        /// <summary>
        /// The company the line belongs to.
        /// </summary>
        /// <value>The company the line belongs to.</value>
        [DataMember(Name = "company", EmitDefaultValue = true)]
        public Guid? Company { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionLineItem {\n");
            sb.Append("  Memo: ").Append(Memo).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Item: ").Append(Item).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  TrackingCategory: ").Append(TrackingCategory).Append("\n");
            sb.Append("  TrackingCategories: ").Append(TrackingCategories).Append("\n");
            sb.Append("  TotalLineAmount: ").Append(TotalLineAmount).Append("\n");
            sb.Append("  TaxRate: ").Append(TaxRate).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionLineItem);
        }

        /// <summary>
        /// Returns true if TransactionLineItem instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionLineItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionLineItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Memo == input.Memo ||
                    (this.Memo != null &&
                    this.Memo.Equals(input.Memo))
                ) && 
                (
                    this.UnitPrice == input.UnitPrice ||
                    (this.UnitPrice != null &&
                    this.UnitPrice.Equals(input.UnitPrice))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Item == input.Item ||
                    (this.Item != null &&
                    this.Item.Equals(input.Item))
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.TrackingCategory == input.TrackingCategory ||
                    (this.TrackingCategory != null &&
                    this.TrackingCategory.Equals(input.TrackingCategory))
                ) && 
                (
                    this.TrackingCategories == input.TrackingCategories ||
                    this.TrackingCategories != null &&
                    input.TrackingCategories != null &&
                    this.TrackingCategories.SequenceEqual(input.TrackingCategories)
                ) && 
                (
                    this.TotalLineAmount == input.TotalLineAmount ||
                    (this.TotalLineAmount != null &&
                    this.TotalLineAmount.Equals(input.TotalLineAmount))
                ) && 
                (
                    this.TaxRate == input.TaxRate ||
                    (this.TaxRate != null &&
                    this.TaxRate.Equals(input.TaxRate))
                ) && 
                (
                    this.Currency == input.Currency ||
                    this.Currency.Equals(input.Currency)
                ) && 
                (
                    this.ExchangeRate == input.ExchangeRate ||
                    (this.ExchangeRate != null &&
                    this.ExchangeRate.Equals(input.ExchangeRate))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Memo != null)
                    hashCode = hashCode * 59 + this.Memo.GetHashCode();
                if (this.UnitPrice != null)
                    hashCode = hashCode * 59 + this.UnitPrice.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Item != null)
                    hashCode = hashCode * 59 + this.Item.GetHashCode();
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.TrackingCategory != null)
                    hashCode = hashCode * 59 + this.TrackingCategory.GetHashCode();
                if (this.TrackingCategories != null)
                    hashCode = hashCode * 59 + this.TrackingCategories.GetHashCode();
                if (this.TotalLineAmount != null)
                    hashCode = hashCode * 59 + this.TotalLineAmount.GetHashCode();
                if (this.TaxRate != null)
                    hashCode = hashCode * 59 + this.TaxRate.GetHashCode();
                hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.ExchangeRate != null)
                    hashCode = hashCode * 59 + this.ExchangeRate.GetHashCode();
                if (this.Company != null)
                    hashCode = hashCode * 59 + this.Company.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // UnitPrice (decimal?) pattern
            Regex regexUnitPrice = new Regex(@"^\\d{0,32}(?:\\.\\d{0,16})?$", RegexOptions.CultureInvariant);
            if (false == regexUnitPrice.Match(this.UnitPrice.ToString()).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UnitPrice, must match a pattern of " + regexUnitPrice, new [] { "UnitPrice" });
            }

            // Quantity (decimal?) pattern
            Regex regexQuantity = new Regex(@"^\\d{0,24}(?:\\.\\d{0,8})?$", RegexOptions.CultureInvariant);
            if (false == regexQuantity.Match(this.Quantity.ToString()).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Quantity, must match a pattern of " + regexQuantity, new [] { "Quantity" });
            }

            // TotalLineAmount (decimal?) pattern
            Regex regexTotalLineAmount = new Regex(@"^\\d{0,32}(?:\\.\\d{0,16})?$", RegexOptions.CultureInvariant);
            if (false == regexTotalLineAmount.Match(this.TotalLineAmount.ToString()).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalLineAmount, must match a pattern of " + regexTotalLineAmount, new [] { "TotalLineAmount" });
            }

            // ExchangeRate (decimal?) pattern
            Regex regexExchangeRate = new Regex(@"^\\d{0,32}(?:\\.\\d{0,16})?$", RegexOptions.CultureInvariant);
            if (false == regexExchangeRate.Match(this.ExchangeRate.ToString()).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExchangeRate, must match a pattern of " + regexExchangeRate, new [] { "ExchangeRate" });
            }

            yield break;
        }
    }

}
