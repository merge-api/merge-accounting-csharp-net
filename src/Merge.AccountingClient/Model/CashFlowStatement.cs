/*
 * Merge Accounting API
 *
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Merge.AccountingClient.Client.OpenAPIDateConverter;

namespace Merge.AccountingClient.Model
{
    /// <summary>
    /// # The CashFlowStatement Object ### Description The &#x60;CashFlowStatement&#x60; object is used to represent a company&#39;s cash flow statement.  ### Usage Example Fetch from the &#x60;LIST CashFlowStatements&#x60; endpoint and view a company&#39;s cash flow statements.
    /// </summary>
    [DataContract(Name = "CashFlowStatement")]
    public partial class CashFlowStatement : IEquatable<CashFlowStatement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CashFlowStatement" /> class.
        /// </summary>
        /// <param name="remoteId">The third-party API ID of the matching object..</param>
        /// <param name="name">The cash flow statement&#39;s name..</param>
        /// <param name="startPeriod">The cash flow statement&#39;s start period..</param>
        /// <param name="endPeriod">The cash flow statement&#39;s end period..</param>
        /// <param name="cashAtBeginningOfPeriod">Cash and cash equivalents at the beginning of the cash flow statement&#39;s period..</param>
        /// <param name="cashAtEndOfPeriod">Cash and cash equivalents at the beginning of the cash flow statement&#39;s period..</param>
        /// <param name="remoteGeneratedAt">The time that cash flow statement was generated by the accounting system..</param>
        public CashFlowStatement(string remoteId = default(string), string name = default(string), DateTime? startPeriod = default(DateTime?), DateTime? endPeriod = default(DateTime?), float? cashAtBeginningOfPeriod = default(float?), float? cashAtEndOfPeriod = default(float?), DateTime? remoteGeneratedAt = default(DateTime?))
        {
            this.RemoteId = remoteId;
            this.Name = name;
            this.StartPeriod = startPeriod;
            this.EndPeriod = endPeriod;
            this.CashAtBeginningOfPeriod = cashAtBeginningOfPeriod;
            this.CashAtEndOfPeriod = cashAtEndOfPeriod;
            this.RemoteGeneratedAt = remoteGeneratedAt;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }

        /// <summary>
        /// The third-party API ID of the matching object.
        /// </summary>
        /// <value>The third-party API ID of the matching object.</value>
        [DataMember(Name = "remote_id", EmitDefaultValue = true)]
        public string RemoteId { get; set; }

        /// <summary>
        /// Gets or Sets RemoteData
        /// </summary>
        [DataMember(Name = "remote_data", EmitDefaultValue = true)]
        public List<RemoteData> RemoteData { get; private set; }

        /// <summary>
        /// Returns false as RemoteData should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRemoteData()
        {
            return false;
        }

        /// <summary>
        /// The cash flow statement&#39;s name.
        /// </summary>
        /// <value>The cash flow statement&#39;s name.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The cash flow statement&#39;s start period.
        /// </summary>
        /// <value>The cash flow statement&#39;s start period.</value>
        [DataMember(Name = "start_period", EmitDefaultValue = true)]
        public DateTime? StartPeriod { get; set; }

        /// <summary>
        /// The cash flow statement&#39;s end period.
        /// </summary>
        /// <value>The cash flow statement&#39;s end period.</value>
        [DataMember(Name = "end_period", EmitDefaultValue = true)]
        public DateTime? EndPeriod { get; set; }

        /// <summary>
        /// Cash and cash equivalents at the beginning of the cash flow statement&#39;s period.
        /// </summary>
        /// <value>Cash and cash equivalents at the beginning of the cash flow statement&#39;s period.</value>
        [DataMember(Name = "cash_at_beginning_of_period", EmitDefaultValue = true)]
        public float? CashAtBeginningOfPeriod { get; set; }

        /// <summary>
        /// Cash and cash equivalents at the beginning of the cash flow statement&#39;s period.
        /// </summary>
        /// <value>Cash and cash equivalents at the beginning of the cash flow statement&#39;s period.</value>
        [DataMember(Name = "cash_at_end_of_period", EmitDefaultValue = true)]
        public float? CashAtEndOfPeriod { get; set; }

        /// <summary>
        /// Gets or Sets OperatingActivities
        /// </summary>
        [DataMember(Name = "operating_activities", EmitDefaultValue = false)]
        public List<ReportItem> OperatingActivities { get; private set; }

        /// <summary>
        /// Returns false as OperatingActivities should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOperatingActivities()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets InvestingActivities
        /// </summary>
        [DataMember(Name = "investing_activities", EmitDefaultValue = false)]
        public List<ReportItem> InvestingActivities { get; private set; }

        /// <summary>
        /// Returns false as InvestingActivities should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInvestingActivities()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets FinancingActivities
        /// </summary>
        [DataMember(Name = "financing_activities", EmitDefaultValue = false)]
        public List<ReportItem> FinancingActivities { get; private set; }

        /// <summary>
        /// Returns false as FinancingActivities should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFinancingActivities()
        {
            return false;
        }

        /// <summary>
        /// The time that cash flow statement was generated by the accounting system.
        /// </summary>
        /// <value>The time that cash flow statement was generated by the accounting system.</value>
        [DataMember(Name = "remote_generated_at", EmitDefaultValue = true)]
        public DateTime? RemoteGeneratedAt { get; set; }

        /// <summary>
        /// Indicates whether or not this object has been deleted by third party webhooks.
        /// </summary>
        /// <value>Indicates whether or not this object has been deleted by third party webhooks.</value>
        [DataMember(Name = "remote_was_deleted", EmitDefaultValue = true)]
        public bool RemoteWasDeleted { get; private set; }

        /// <summary>
        /// Returns false as RemoteWasDeleted should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRemoteWasDeleted()
        {
            return false;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CashFlowStatement {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RemoteId: ").Append(RemoteId).Append("\n");
            sb.Append("  RemoteData: ").Append(RemoteData).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  StartPeriod: ").Append(StartPeriod).Append("\n");
            sb.Append("  EndPeriod: ").Append(EndPeriod).Append("\n");
            sb.Append("  CashAtBeginningOfPeriod: ").Append(CashAtBeginningOfPeriod).Append("\n");
            sb.Append("  CashAtEndOfPeriod: ").Append(CashAtEndOfPeriod).Append("\n");
            sb.Append("  OperatingActivities: ").Append(OperatingActivities).Append("\n");
            sb.Append("  InvestingActivities: ").Append(InvestingActivities).Append("\n");
            sb.Append("  FinancingActivities: ").Append(FinancingActivities).Append("\n");
            sb.Append("  RemoteGeneratedAt: ").Append(RemoteGeneratedAt).Append("\n");
            sb.Append("  RemoteWasDeleted: ").Append(RemoteWasDeleted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CashFlowStatement);
        }

        /// <summary>
        /// Returns true if CashFlowStatement instances are equal
        /// </summary>
        /// <param name="input">Instance of CashFlowStatement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CashFlowStatement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.RemoteId == input.RemoteId ||
                    (this.RemoteId != null &&
                    this.RemoteId.Equals(input.RemoteId))
                ) && 
                (
                    this.RemoteData == input.RemoteData ||
                    this.RemoteData != null &&
                    input.RemoteData != null &&
                    this.RemoteData.SequenceEqual(input.RemoteData)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.StartPeriod == input.StartPeriod ||
                    (this.StartPeriod != null &&
                    this.StartPeriod.Equals(input.StartPeriod))
                ) && 
                (
                    this.EndPeriod == input.EndPeriod ||
                    (this.EndPeriod != null &&
                    this.EndPeriod.Equals(input.EndPeriod))
                ) && 
                (
                    this.CashAtBeginningOfPeriod == input.CashAtBeginningOfPeriod ||
                    (this.CashAtBeginningOfPeriod != null &&
                    this.CashAtBeginningOfPeriod.Equals(input.CashAtBeginningOfPeriod))
                ) && 
                (
                    this.CashAtEndOfPeriod == input.CashAtEndOfPeriod ||
                    (this.CashAtEndOfPeriod != null &&
                    this.CashAtEndOfPeriod.Equals(input.CashAtEndOfPeriod))
                ) && 
                (
                    this.OperatingActivities == input.OperatingActivities ||
                    this.OperatingActivities != null &&
                    input.OperatingActivities != null &&
                    this.OperatingActivities.SequenceEqual(input.OperatingActivities)
                ) && 
                (
                    this.InvestingActivities == input.InvestingActivities ||
                    this.InvestingActivities != null &&
                    input.InvestingActivities != null &&
                    this.InvestingActivities.SequenceEqual(input.InvestingActivities)
                ) && 
                (
                    this.FinancingActivities == input.FinancingActivities ||
                    this.FinancingActivities != null &&
                    input.FinancingActivities != null &&
                    this.FinancingActivities.SequenceEqual(input.FinancingActivities)
                ) && 
                (
                    this.RemoteGeneratedAt == input.RemoteGeneratedAt ||
                    (this.RemoteGeneratedAt != null &&
                    this.RemoteGeneratedAt.Equals(input.RemoteGeneratedAt))
                ) && 
                (
                    this.RemoteWasDeleted == input.RemoteWasDeleted ||
                    this.RemoteWasDeleted.Equals(input.RemoteWasDeleted)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.RemoteId != null)
                    hashCode = hashCode * 59 + this.RemoteId.GetHashCode();
                if (this.RemoteData != null)
                    hashCode = hashCode * 59 + this.RemoteData.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.StartPeriod != null)
                    hashCode = hashCode * 59 + this.StartPeriod.GetHashCode();
                if (this.EndPeriod != null)
                    hashCode = hashCode * 59 + this.EndPeriod.GetHashCode();
                if (this.CashAtBeginningOfPeriod != null)
                    hashCode = hashCode * 59 + this.CashAtBeginningOfPeriod.GetHashCode();
                if (this.CashAtEndOfPeriod != null)
                    hashCode = hashCode * 59 + this.CashAtEndOfPeriod.GetHashCode();
                if (this.OperatingActivities != null)
                    hashCode = hashCode * 59 + this.OperatingActivities.GetHashCode();
                if (this.InvestingActivities != null)
                    hashCode = hashCode * 59 + this.InvestingActivities.GetHashCode();
                if (this.FinancingActivities != null)
                    hashCode = hashCode * 59 + this.FinancingActivities.GetHashCode();
                if (this.RemoteGeneratedAt != null)
                    hashCode = hashCode * 59 + this.RemoteGeneratedAt.GetHashCode();
                hashCode = hashCode * 59 + this.RemoteWasDeleted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
