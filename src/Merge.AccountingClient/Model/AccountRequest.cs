/*
 * Merge Accounting API
 *
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Merge.AccountingClient.Client.OpenAPIDateConverter;

namespace Merge.AccountingClient.Model
{
    /// <summary>
    /// # The Account Object ### Description The &#x60;Account&#x60; object is what companies use to track transactions. They can be both bank accounts or a general ledger account (also called a chart of accounts).  ### Usage Example Fetch from the &#x60;LIST Accounts&#x60; endpoint and view a company&#39;s accounts.
    /// </summary>
    [DataContract(Name = "AccountRequest")]
    public partial class AccountRequest : IEquatable<AccountRequest>, IValidatableObject
    {

        /// <summary>
        /// The account&#39;s broadest grouping.
        /// </summary>
        /// <value>The account&#39;s broadest grouping.</value>
        [DataMember(Name = "classification", EmitDefaultValue = true)]
        public ClassificationEnum? Classification { get; set; }

        /// <summary>
        /// The account&#39;s status.
        /// </summary>
        /// <value>The account&#39;s status.</value>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public AccountStatusEnum? Status { get; set; }

        /// <summary>
        /// The account&#39;s currency.
        /// </summary>
        /// <value>The account&#39;s currency.</value>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public CurrencyEnum? Currency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountRequest" /> class.
        /// </summary>
        /// <param name="name">The account&#39;s name..</param>
        /// <param name="description">The account&#39;s description..</param>
        /// <param name="classification">The account&#39;s broadest grouping..</param>
        /// <param name="type">The account&#39;s type is a narrower and more specific grouping within the account&#39;s classification..</param>
        /// <param name="status">The account&#39;s status..</param>
        /// <param name="currentBalance">The account&#39;s current balance..</param>
        /// <param name="currency">The account&#39;s currency..</param>
        /// <param name="accountNumber">The account&#39;s number..</param>
        /// <param name="parentAccount">ID of the parent account..</param>
        /// <param name="company">The company the account belongs to..</param>
        /// <param name="integrationParams">integrationParams.</param>
        /// <param name="linkedAccountParams">linkedAccountParams.</param>
        public AccountRequest(string name = default(string), string description = default(string), ClassificationEnum? classification = default(ClassificationEnum?), string type = default(string), AccountStatusEnum? status = default(AccountStatusEnum?), float? currentBalance = default(float?), CurrencyEnum? currency = default(CurrencyEnum?), string accountNumber = default(string), Guid? parentAccount = default(Guid?), Guid? company = default(Guid?), Dictionary<string, Object> integrationParams = default(Dictionary<string, Object>), Dictionary<string, Object> linkedAccountParams = default(Dictionary<string, Object>))
        {
            this.Name = name;
            this.Description = description;
            this.Classification = classification;
            this.Type = type;
            this.Status = status;
            this.CurrentBalance = currentBalance;
            this.Currency = currency;
            this.AccountNumber = accountNumber;
            this.ParentAccount = parentAccount;
            this.Company = company;
            this.IntegrationParams = integrationParams;
            this.LinkedAccountParams = linkedAccountParams;
        }

        /// <summary>
        /// The account&#39;s name.
        /// </summary>
        /// <value>The account&#39;s name.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The account&#39;s description.
        /// </summary>
        /// <value>The account&#39;s description.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The account&#39;s type is a narrower and more specific grouping within the account&#39;s classification.
        /// </summary>
        /// <value>The account&#39;s type is a narrower and more specific grouping within the account&#39;s classification.</value>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// The account&#39;s current balance.
        /// </summary>
        /// <value>The account&#39;s current balance.</value>
        [DataMember(Name = "current_balance", EmitDefaultValue = true)]
        public float? CurrentBalance { get; set; }

        /// <summary>
        /// The account&#39;s number.
        /// </summary>
        /// <value>The account&#39;s number.</value>
        [DataMember(Name = "account_number", EmitDefaultValue = true)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// ID of the parent account.
        /// </summary>
        /// <value>ID of the parent account.</value>
        [DataMember(Name = "parent_account", EmitDefaultValue = true)]
        public Guid? ParentAccount { get; set; }

        /// <summary>
        /// The company the account belongs to.
        /// </summary>
        /// <value>The company the account belongs to.</value>
        [DataMember(Name = "company", EmitDefaultValue = true)]
        public Guid? Company { get; set; }

        /// <summary>
        /// Gets or Sets IntegrationParams
        /// </summary>
        [DataMember(Name = "integration_params", EmitDefaultValue = true)]
        public Dictionary<string, Object> IntegrationParams { get; set; }

        /// <summary>
        /// Gets or Sets LinkedAccountParams
        /// </summary>
        [DataMember(Name = "linked_account_params", EmitDefaultValue = true)]
        public Dictionary<string, Object> LinkedAccountParams { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Classification: ").Append(Classification).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CurrentBalance: ").Append(CurrentBalance).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  ParentAccount: ").Append(ParentAccount).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  IntegrationParams: ").Append(IntegrationParams).Append("\n");
            sb.Append("  LinkedAccountParams: ").Append(LinkedAccountParams).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountRequest);
        }

        /// <summary>
        /// Returns true if AccountRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Classification == input.Classification ||
                    this.Classification.Equals(input.Classification)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.CurrentBalance == input.CurrentBalance ||
                    (this.CurrentBalance != null &&
                    this.CurrentBalance.Equals(input.CurrentBalance))
                ) && 
                (
                    this.Currency == input.Currency ||
                    this.Currency.Equals(input.Currency)
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.ParentAccount == input.ParentAccount ||
                    (this.ParentAccount != null &&
                    this.ParentAccount.Equals(input.ParentAccount))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.IntegrationParams == input.IntegrationParams ||
                    this.IntegrationParams != null &&
                    input.IntegrationParams != null &&
                    this.IntegrationParams.SequenceEqual(input.IntegrationParams)
                ) && 
                (
                    this.LinkedAccountParams == input.LinkedAccountParams ||
                    this.LinkedAccountParams != null &&
                    input.LinkedAccountParams != null &&
                    this.LinkedAccountParams.SequenceEqual(input.LinkedAccountParams)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                hashCode = hashCode * 59 + this.Classification.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.CurrentBalance != null)
                    hashCode = hashCode * 59 + this.CurrentBalance.GetHashCode();
                hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.ParentAccount != null)
                    hashCode = hashCode * 59 + this.ParentAccount.GetHashCode();
                if (this.Company != null)
                    hashCode = hashCode * 59 + this.Company.GetHashCode();
                if (this.IntegrationParams != null)
                    hashCode = hashCode * 59 + this.IntegrationParams.GetHashCode();
                if (this.LinkedAccountParams != null)
                    hashCode = hashCode * 59 + this.LinkedAccountParams.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
