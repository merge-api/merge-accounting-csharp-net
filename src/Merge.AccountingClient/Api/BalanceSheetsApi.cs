/*
 * Merge Accounting API
 *
 * The unified API for building rich integrations with multiple Accounting & Finance platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Merge.AccountingClient.Client;
using Merge.AccountingClient.Model;

namespace Merge.AccountingClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBalanceSheetsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of &#x60;BalanceSheet&#x60; objects.
        /// </remarks>
        /// <exception cref="Merge.AccountingClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="companyId">If provided, will only return balance sheets for this company. (optional)</param>
        /// <param name="createdAfter">If provided, will only return objects created after this datetime. (optional)</param>
        /// <param name="createdBefore">If provided, will only return objects created before this datetime. (optional)</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="includeDeletedData">Whether to include data that was marked as deleted by third party webhooks. (optional)</param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="modifiedAfter">If provided, will only return objects modified after this datetime. (optional)</param>
        /// <param name="modifiedBefore">If provided, will only return objects modified before this datetime. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="remoteId">The API provider&#39;s ID for the given object. (optional)</param>
        /// <returns>PaginatedBalanceSheetList</returns>
        PaginatedBalanceSheetList BalanceSheetsList(string xAccountToken, string companyId = default(string), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string cursor = default(string), bool? includeDeletedData = default(bool?), bool? includeRemoteData = default(bool?), DateTime? modifiedAfter = default(DateTime?), DateTime? modifiedBefore = default(DateTime?), int? pageSize = default(int?), string remoteId = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of &#x60;BalanceSheet&#x60; objects.
        /// </remarks>
        /// <exception cref="Merge.AccountingClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="companyId">If provided, will only return balance sheets for this company. (optional)</param>
        /// <param name="createdAfter">If provided, will only return objects created after this datetime. (optional)</param>
        /// <param name="createdBefore">If provided, will only return objects created before this datetime. (optional)</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="includeDeletedData">Whether to include data that was marked as deleted by third party webhooks. (optional)</param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="modifiedAfter">If provided, will only return objects modified after this datetime. (optional)</param>
        /// <param name="modifiedBefore">If provided, will only return objects modified before this datetime. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="remoteId">The API provider&#39;s ID for the given object. (optional)</param>
        /// <returns>ApiResponse of PaginatedBalanceSheetList</returns>
        ApiResponse<PaginatedBalanceSheetList> BalanceSheetsListWithHttpInfo(string xAccountToken, string companyId = default(string), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string cursor = default(string), bool? includeDeletedData = default(bool?), bool? includeRemoteData = default(bool?), DateTime? modifiedAfter = default(DateTime?), DateTime? modifiedBefore = default(DateTime?), int? pageSize = default(int?), string remoteId = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a &#x60;BalanceSheet&#x60; object with the given &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Merge.AccountingClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="id"></param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <returns>BalanceSheet</returns>
        BalanceSheet BalanceSheetsRetrieve(string xAccountToken, Guid id, bool? includeRemoteData = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a &#x60;BalanceSheet&#x60; object with the given &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Merge.AccountingClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="id"></param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <returns>ApiResponse of BalanceSheet</returns>
        ApiResponse<BalanceSheet> BalanceSheetsRetrieveWithHttpInfo(string xAccountToken, Guid id, bool? includeRemoteData = default(bool?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBalanceSheetsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of &#x60;BalanceSheet&#x60; objects.
        /// </remarks>
        /// <exception cref="Merge.AccountingClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="companyId">If provided, will only return balance sheets for this company. (optional)</param>
        /// <param name="createdAfter">If provided, will only return objects created after this datetime. (optional)</param>
        /// <param name="createdBefore">If provided, will only return objects created before this datetime. (optional)</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="includeDeletedData">Whether to include data that was marked as deleted by third party webhooks. (optional)</param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="modifiedAfter">If provided, will only return objects modified after this datetime. (optional)</param>
        /// <param name="modifiedBefore">If provided, will only return objects modified before this datetime. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="remoteId">The API provider&#39;s ID for the given object. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedBalanceSheetList</returns>
        System.Threading.Tasks.Task<PaginatedBalanceSheetList> BalanceSheetsListAsync(string xAccountToken, string companyId = default(string), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string cursor = default(string), bool? includeDeletedData = default(bool?), bool? includeRemoteData = default(bool?), DateTime? modifiedAfter = default(DateTime?), DateTime? modifiedBefore = default(DateTime?), int? pageSize = default(int?), string remoteId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of &#x60;BalanceSheet&#x60; objects.
        /// </remarks>
        /// <exception cref="Merge.AccountingClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="companyId">If provided, will only return balance sheets for this company. (optional)</param>
        /// <param name="createdAfter">If provided, will only return objects created after this datetime. (optional)</param>
        /// <param name="createdBefore">If provided, will only return objects created before this datetime. (optional)</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="includeDeletedData">Whether to include data that was marked as deleted by third party webhooks. (optional)</param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="modifiedAfter">If provided, will only return objects modified after this datetime. (optional)</param>
        /// <param name="modifiedBefore">If provided, will only return objects modified before this datetime. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="remoteId">The API provider&#39;s ID for the given object. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedBalanceSheetList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedBalanceSheetList>> BalanceSheetsListWithHttpInfoAsync(string xAccountToken, string companyId = default(string), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string cursor = default(string), bool? includeDeletedData = default(bool?), bool? includeRemoteData = default(bool?), DateTime? modifiedAfter = default(DateTime?), DateTime? modifiedBefore = default(DateTime?), int? pageSize = default(int?), string remoteId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a &#x60;BalanceSheet&#x60; object with the given &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Merge.AccountingClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="id"></param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BalanceSheet</returns>
        System.Threading.Tasks.Task<BalanceSheet> BalanceSheetsRetrieveAsync(string xAccountToken, Guid id, bool? includeRemoteData = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a &#x60;BalanceSheet&#x60; object with the given &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Merge.AccountingClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="id"></param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BalanceSheet)</returns>
        System.Threading.Tasks.Task<ApiResponse<BalanceSheet>> BalanceSheetsRetrieveWithHttpInfoAsync(string xAccountToken, Guid id, bool? includeRemoteData = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBalanceSheetsApi : IBalanceSheetsApiSync, IBalanceSheetsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BalanceSheetsApi : IBalanceSheetsApi
    {
        private Merge.AccountingClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BalanceSheetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BalanceSheetsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BalanceSheetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BalanceSheetsApi(String basePath)
        {
            this.Configuration = Merge.AccountingClient.Client.Configuration.MergeConfigurations(
                Merge.AccountingClient.Client.GlobalConfiguration.Instance,
                new Merge.AccountingClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Merge.AccountingClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Merge.AccountingClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Merge.AccountingClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BalanceSheetsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BalanceSheetsApi(Merge.AccountingClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Merge.AccountingClient.Client.Configuration.MergeConfigurations(
                Merge.AccountingClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Merge.AccountingClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Merge.AccountingClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Merge.AccountingClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BalanceSheetsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BalanceSheetsApi(Merge.AccountingClient.Client.ISynchronousClient client, Merge.AccountingClient.Client.IAsynchronousClient asyncClient, Merge.AccountingClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Merge.AccountingClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Merge.AccountingClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Merge.AccountingClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Merge.AccountingClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Merge.AccountingClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Returns a list of &#x60;BalanceSheet&#x60; objects.
        /// </summary>
        /// <exception cref="Merge.AccountingClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="companyId">If provided, will only return balance sheets for this company. (optional)</param>
        /// <param name="createdAfter">If provided, will only return objects created after this datetime. (optional)</param>
        /// <param name="createdBefore">If provided, will only return objects created before this datetime. (optional)</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="includeDeletedData">Whether to include data that was marked as deleted by third party webhooks. (optional)</param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="modifiedAfter">If provided, will only return objects modified after this datetime. (optional)</param>
        /// <param name="modifiedBefore">If provided, will only return objects modified before this datetime. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="remoteId">The API provider&#39;s ID for the given object. (optional)</param>
        /// <returns>PaginatedBalanceSheetList</returns>
        public PaginatedBalanceSheetList BalanceSheetsList(string xAccountToken, string companyId = default(string), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string cursor = default(string), bool? includeDeletedData = default(bool?), bool? includeRemoteData = default(bool?), DateTime? modifiedAfter = default(DateTime?), DateTime? modifiedBefore = default(DateTime?), int? pageSize = default(int?), string remoteId = default(string))
        {
            Merge.AccountingClient.Client.ApiResponse<PaginatedBalanceSheetList> localVarResponse = BalanceSheetsListWithHttpInfo(xAccountToken, companyId, createdAfter, createdBefore, cursor, includeDeletedData, includeRemoteData, modifiedAfter, modifiedBefore, pageSize, remoteId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of &#x60;BalanceSheet&#x60; objects.
        /// </summary>
        /// <exception cref="Merge.AccountingClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="companyId">If provided, will only return balance sheets for this company. (optional)</param>
        /// <param name="createdAfter">If provided, will only return objects created after this datetime. (optional)</param>
        /// <param name="createdBefore">If provided, will only return objects created before this datetime. (optional)</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="includeDeletedData">Whether to include data that was marked as deleted by third party webhooks. (optional)</param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="modifiedAfter">If provided, will only return objects modified after this datetime. (optional)</param>
        /// <param name="modifiedBefore">If provided, will only return objects modified before this datetime. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="remoteId">The API provider&#39;s ID for the given object. (optional)</param>
        /// <returns>ApiResponse of PaginatedBalanceSheetList</returns>
        public Merge.AccountingClient.Client.ApiResponse<PaginatedBalanceSheetList> BalanceSheetsListWithHttpInfo(string xAccountToken, string companyId = default(string), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string cursor = default(string), bool? includeDeletedData = default(bool?), bool? includeRemoteData = default(bool?), DateTime? modifiedAfter = default(DateTime?), DateTime? modifiedBefore = default(DateTime?), int? pageSize = default(int?), string remoteId = default(string))
        {
            // verify the required parameter 'xAccountToken' is set
            if (xAccountToken == null)
                throw new Merge.AccountingClient.Client.ApiException(400, "Missing required parameter 'xAccountToken' when calling BalanceSheetsApi->BalanceSheetsList");

            Merge.AccountingClient.Client.RequestOptions localVarRequestOptions = new Merge.AccountingClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Merge.AccountingClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Merge.AccountingClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (companyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.AccountingClient.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.AccountingClient.Client.ClientUtils.ParameterToMultiMap("", "created_after", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.AccountingClient.Client.ClientUtils.ParameterToMultiMap("", "created_before", createdBefore));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.AccountingClient.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (includeDeletedData != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.AccountingClient.Client.ClientUtils.ParameterToMultiMap("", "include_deleted_data", includeDeletedData));
            }
            if (includeRemoteData != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.AccountingClient.Client.ClientUtils.ParameterToMultiMap("", "include_remote_data", includeRemoteData));
            }
            if (modifiedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.AccountingClient.Client.ClientUtils.ParameterToMultiMap("", "modified_after", modifiedAfter));
            }
            if (modifiedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.AccountingClient.Client.ClientUtils.ParameterToMultiMap("", "modified_before", modifiedBefore));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.AccountingClient.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (remoteId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.AccountingClient.Client.ClientUtils.ParameterToMultiMap("", "remote_id", remoteId));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Account-Token", Merge.AccountingClient.Client.ClientUtils.ParameterToString(xAccountToken)); // header parameter

            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PaginatedBalanceSheetList>("/balance-sheets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BalanceSheetsList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of &#x60;BalanceSheet&#x60; objects.
        /// </summary>
        /// <exception cref="Merge.AccountingClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="companyId">If provided, will only return balance sheets for this company. (optional)</param>
        /// <param name="createdAfter">If provided, will only return objects created after this datetime. (optional)</param>
        /// <param name="createdBefore">If provided, will only return objects created before this datetime. (optional)</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="includeDeletedData">Whether to include data that was marked as deleted by third party webhooks. (optional)</param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="modifiedAfter">If provided, will only return objects modified after this datetime. (optional)</param>
        /// <param name="modifiedBefore">If provided, will only return objects modified before this datetime. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="remoteId">The API provider&#39;s ID for the given object. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedBalanceSheetList</returns>
        public async System.Threading.Tasks.Task<PaginatedBalanceSheetList> BalanceSheetsListAsync(string xAccountToken, string companyId = default(string), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string cursor = default(string), bool? includeDeletedData = default(bool?), bool? includeRemoteData = default(bool?), DateTime? modifiedAfter = default(DateTime?), DateTime? modifiedBefore = default(DateTime?), int? pageSize = default(int?), string remoteId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Merge.AccountingClient.Client.ApiResponse<PaginatedBalanceSheetList> localVarResponse = await BalanceSheetsListWithHttpInfoAsync(xAccountToken, companyId, createdAfter, createdBefore, cursor, includeDeletedData, includeRemoteData, modifiedAfter, modifiedBefore, pageSize, remoteId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of &#x60;BalanceSheet&#x60; objects.
        /// </summary>
        /// <exception cref="Merge.AccountingClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="companyId">If provided, will only return balance sheets for this company. (optional)</param>
        /// <param name="createdAfter">If provided, will only return objects created after this datetime. (optional)</param>
        /// <param name="createdBefore">If provided, will only return objects created before this datetime. (optional)</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="includeDeletedData">Whether to include data that was marked as deleted by third party webhooks. (optional)</param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="modifiedAfter">If provided, will only return objects modified after this datetime. (optional)</param>
        /// <param name="modifiedBefore">If provided, will only return objects modified before this datetime. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="remoteId">The API provider&#39;s ID for the given object. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedBalanceSheetList)</returns>
        public async System.Threading.Tasks.Task<Merge.AccountingClient.Client.ApiResponse<PaginatedBalanceSheetList>> BalanceSheetsListWithHttpInfoAsync(string xAccountToken, string companyId = default(string), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string cursor = default(string), bool? includeDeletedData = default(bool?), bool? includeRemoteData = default(bool?), DateTime? modifiedAfter = default(DateTime?), DateTime? modifiedBefore = default(DateTime?), int? pageSize = default(int?), string remoteId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xAccountToken' is set
            if (xAccountToken == null)
                throw new Merge.AccountingClient.Client.ApiException(400, "Missing required parameter 'xAccountToken' when calling BalanceSheetsApi->BalanceSheetsList");


            Merge.AccountingClient.Client.RequestOptions localVarRequestOptions = new Merge.AccountingClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Merge.AccountingClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Merge.AccountingClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (companyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.AccountingClient.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.AccountingClient.Client.ClientUtils.ParameterToMultiMap("", "created_after", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.AccountingClient.Client.ClientUtils.ParameterToMultiMap("", "created_before", createdBefore));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.AccountingClient.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (includeDeletedData != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.AccountingClient.Client.ClientUtils.ParameterToMultiMap("", "include_deleted_data", includeDeletedData));
            }
            if (includeRemoteData != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.AccountingClient.Client.ClientUtils.ParameterToMultiMap("", "include_remote_data", includeRemoteData));
            }
            if (modifiedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.AccountingClient.Client.ClientUtils.ParameterToMultiMap("", "modified_after", modifiedAfter));
            }
            if (modifiedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.AccountingClient.Client.ClientUtils.ParameterToMultiMap("", "modified_before", modifiedBefore));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.AccountingClient.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (remoteId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.AccountingClient.Client.ClientUtils.ParameterToMultiMap("", "remote_id", remoteId));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Account-Token", Merge.AccountingClient.Client.ClientUtils.ParameterToString(xAccountToken)); // header parameter

            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PaginatedBalanceSheetList>("/balance-sheets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BalanceSheetsList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a &#x60;BalanceSheet&#x60; object with the given &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Merge.AccountingClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="id"></param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <returns>BalanceSheet</returns>
        public BalanceSheet BalanceSheetsRetrieve(string xAccountToken, Guid id, bool? includeRemoteData = default(bool?))
        {
            Merge.AccountingClient.Client.ApiResponse<BalanceSheet> localVarResponse = BalanceSheetsRetrieveWithHttpInfo(xAccountToken, id, includeRemoteData);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a &#x60;BalanceSheet&#x60; object with the given &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Merge.AccountingClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="id"></param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <returns>ApiResponse of BalanceSheet</returns>
        public Merge.AccountingClient.Client.ApiResponse<BalanceSheet> BalanceSheetsRetrieveWithHttpInfo(string xAccountToken, Guid id, bool? includeRemoteData = default(bool?))
        {
            // verify the required parameter 'xAccountToken' is set
            if (xAccountToken == null)
                throw new Merge.AccountingClient.Client.ApiException(400, "Missing required parameter 'xAccountToken' when calling BalanceSheetsApi->BalanceSheetsRetrieve");

            Merge.AccountingClient.Client.RequestOptions localVarRequestOptions = new Merge.AccountingClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Merge.AccountingClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Merge.AccountingClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Merge.AccountingClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (includeRemoteData != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.AccountingClient.Client.ClientUtils.ParameterToMultiMap("", "include_remote_data", includeRemoteData));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Account-Token", Merge.AccountingClient.Client.ClientUtils.ParameterToString(xAccountToken)); // header parameter

            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BalanceSheet>("/balance-sheets/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BalanceSheetsRetrieve", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a &#x60;BalanceSheet&#x60; object with the given &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Merge.AccountingClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="id"></param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BalanceSheet</returns>
        public async System.Threading.Tasks.Task<BalanceSheet> BalanceSheetsRetrieveAsync(string xAccountToken, Guid id, bool? includeRemoteData = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Merge.AccountingClient.Client.ApiResponse<BalanceSheet> localVarResponse = await BalanceSheetsRetrieveWithHttpInfoAsync(xAccountToken, id, includeRemoteData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a &#x60;BalanceSheet&#x60; object with the given &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Merge.AccountingClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="id"></param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BalanceSheet)</returns>
        public async System.Threading.Tasks.Task<Merge.AccountingClient.Client.ApiResponse<BalanceSheet>> BalanceSheetsRetrieveWithHttpInfoAsync(string xAccountToken, Guid id, bool? includeRemoteData = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xAccountToken' is set
            if (xAccountToken == null)
                throw new Merge.AccountingClient.Client.ApiException(400, "Missing required parameter 'xAccountToken' when calling BalanceSheetsApi->BalanceSheetsRetrieve");


            Merge.AccountingClient.Client.RequestOptions localVarRequestOptions = new Merge.AccountingClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Merge.AccountingClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Merge.AccountingClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Merge.AccountingClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (includeRemoteData != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.AccountingClient.Client.ClientUtils.ParameterToMultiMap("", "include_remote_data", includeRemoteData));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Account-Token", Merge.AccountingClient.Client.ClientUtils.ParameterToString(xAccountToken)); // header parameter

            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BalanceSheet>("/balance-sheets/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BalanceSheetsRetrieve", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
